{
  "Luna Object with Tests (Generic)": {
    "prefix": "luna",
    "body": [
      "luna()",
      "",
      "  ;create a suite",
      "  s = l.suite('Test suite that')",
      "  ",
      "    ; create a test",
      "    it = s.test('tests some functionality')",
      "    ",
      "      ; add an expectation for our test",
      "      (it.expects($1)).toBe$2",
      "    ",
      "      $0",
      "    ",
      "l.generateTestSummary",
      "end"
    ],
    "description": "Luna Object with Tests  (Generic)",
    "scope": "source.idl"
  },
  "Luna Object with Tests (for ENVI)": {
    "prefix": "luna",
    "body": [
      "luna()",
      "",
      "; start envi headlessly",
      "e = envi(/HEADLESS)",
      "",
      "  ;create a suite",
      "  s = l.suite('Test suite that')",
      "  ",
      "    ; create a test",
      "    it = s.test('tests some functionality')",
      "    ",
      "      ; add an expectation for our test",
      "      (it.expects($1)).toBe$2",
      "    ",
      "      $0",
      "    ",
      "l.generateTestSummary",
      "end"
    ],
    "description": "Luna Object with Tests (for ENVI)",
    "scope": "source.idl"
  },
  "Luna Object with Tests (for ENVI Task)": {
    "prefix": "luna",
    "body": [
      "luna()",
      "",
      "; get the directory this code is in",
      "thisdir = file_dirname(routine_filepath())",
      "",
      "; get the task file we are testing",
      "taskFile = thisdir + path_sep() + '$1.task'",
      "",
      "; start envi headlessly",
      "e = envi(/HEADLESS)",
      "",
      "  ; create a suite",
      "  s = l.suite('Test that our task file')",
      "    ",
      "    ; make sure the task exist",
      "    it = s.test('exists')",
      "      ",
      "      (it.expects(1)).toEqual, file_test(taskFile)",
      "      ",
      "    ; make sure we have a valid task file",
      "    it = s.test('is a valid task file')",
      "      ",
      "      (it.expects(taskFile)).toBeAValidENVITask",
      "      ",
      "  ; create a suite",
      "  s = l.suite('Test that we can')",
      "    ",
      "    ; create a test",
      "    it = s.test('process using our procedure')",
      "      ",
      "      ; run procedure",
      "      (it.expects('$1')).toRunProcedure",
      "    ",
      "  ; create a suite",
      "  s = l.suite('Test that we can')",
      "    ",
      "    ; create a test",
      "    it = s.test('process using our task')",
      "      ",
      "      ; create the task object",
      "      task = ENVITask(taskFile)",
      "      ",
      "      ; run task",
      "      (it.expects(task)).toRunENVITask",
      "",
      "l.generateTestSummary",
      "end"
    ],
    "description": "Luna Object with Tests (for ENVI Task)",
    "scope": "source.idl"
  },
  "Luna Object with Tests (for IDL Task)": {
    "prefix": "luna",
    "body": [
      "luna()",
      "",
      "; get the directory this code is in",
      "thisdir = file_dirname(routine_filepath())",
      "",
      "; get the task file we are testing",
      "taskFile = thisdir + path_sep() + '$1.task'",
      "",
      "  ; create a suite",
      "  s = l.suite('Test that our task file')",
      "    ",
      "    ; make sure the task exist",
      "    it = s.test('exists')",
      "      ",
      "      (it.expects(1)).toEqual, file_test(taskFile)",
      "      ",
      "    ; make sure we have a valid task file",
      "    it = s.test('is a valid task file')",
      "      ",
      "      (it.expects(taskFile)).toBeAValidIDLTask",
      "      ",
      "  ; create a suite",
      "  s = l.suite('Test that we can')",
      "    ",
      "    ; create a test",
      "    it = s.test('process using our procedure')",
      "      ",
      "      ; run procedure",
      "      (it.expects('$1')).toRunProcedure",
      "    ",
      "  ; create a suite",
      "  s = l.suite('Test that we can')",
      "    ",
      "    ; create a test",
      "    it = s.test('process using our task')",
      "      ",
      "      ; create the task object",
      "      task = IDLTask(taskFile)",
      "      ",
      "      ; run task",
      "      (it.expects(task)).toExecuteIDLTask",
      "",
      "l.generateTestSummary",
      "end"
    ],
    "description": "Luna Object with Tests (for IDL Task)",
    "scope": "source.idl"
  },
  "Luna Test Suite (Generic)": {
    "prefix": "suite",
    "body": [
      "suite('Test suite that')",
      "  ",
      "  ; create a test",
      "  it = s.test('tests some functionality')",
      "  ",
      "    ; add an expectation for our test",
      "    (it.expects($1)).$0",
      "    "
    ],
    "description": "Luna Test Suite (Generic)",
    "scope": "source.idl"
  },
  "Luna Test Suite (Generic with NOT)": {
    "prefix": "suite",
    "body": [
      "suite('Test suite that')",
      "  ",
      "  ; create a test",
      "  it = s.test('tests some functionality')",
      "  ",
      "    ; add an expectation for our test",
      "    (it.expects($1))._not_.$0",
      "    "
    ],
    "description": "Luna Test Suite (Generic with NOT)",
    "scope": "source.idl"
  },
  "Luna Test (Generic)": {
    "prefix": "test",
    "body": [
      "test('tests some functionality')",
      "  ",
      "  ; add an expectation for our test",
      "  (it.expects($1)).$0",
      "  "
    ],
    "description": "Luna Test (Generic)",
    "scope": "source.idl"
  },
  "Luna Test (Generic with NOT)": {
    "prefix": "test",
    "body": [
      "test('tests some functionality')",
      "  ",
      "  ; add an expectation for our test",
      "  (it.expects($1))._not_.$0",
      "  "
    ],
    "description": "Luna Test (Generic with NOT)",
    "scope": "source.idl"
  }
}
