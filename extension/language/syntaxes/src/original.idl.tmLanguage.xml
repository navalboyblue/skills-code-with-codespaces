<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>name</key>
	<string>IDL</string>
  <key>scopeName</key>
	<string>source.idl</string>
	<key>uuid</key>
	<string>48F8858B-72FF-11D9-BFEE-000D93589AF6</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#idl_routine_definitions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constants_override</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#brackets</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#braces</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#case_switch</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#linecontinuationblocks</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#float</string>
		</dict>
    <dict>
      <key>include</key>
      <string>#asterisk</string>
    </dict>
		<dict>
			<key>include</key>
			<string>#integer</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#idl_procedures</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#all_idl_keywords_except_procedures</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#all_idl_comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#idl_executive_commands</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>all_idl_keywords_except_procedures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#idl_operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_storage_type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_sysvar</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_functions</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_structures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_control_statements</string>
				</dict>
			</array>
		</dict>
		<key>allofem</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#case_switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#end_in_parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all_idl_keywords_except_procedures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_procedures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all_idl_comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#float</string>
				</dict>
        <dict>
					<key>include</key>
					<string>#asterisk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
			</array>
		</dict>
		<key>allofembutprocedures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#braces</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#linecontinuationblocks</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#case_switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#end_in_parens</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all_idl_keywords_except_procedures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#all_idl_comments</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#float</string>
				</dict>
        <dict>
					<key>include</key>
					<string>#asterisk</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
			</array>
		</dict>
		<key>all_idl_comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.divider.idl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^;(=)\s*$\n</string>
					<key>name</key>
					<string>comment.line.banner.divider.idl</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.toc-list.banner.line.idl</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*;=\s*(.*?)\s*$\n?</string>
					<key>name</key>
					<string>comment.line.banner.idl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.idl</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.semicolon.idl</string>
				</dict>
			</array>
		</dict>
		<key>brackets</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brackets.idl</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.brackets.idl</string>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brackets.idl</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#idl_properties_in_brackets</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#allofem</string>
				</dict>
			</array>
		</dict>
		<key>braces</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brackets.idl</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.brackets.idl</string>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brackets.idl</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#idl_structure_tag_names</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#allofem</string>
				</dict>
			</array>
		</dict>
		<key>case_switch</key>
		<dict>
			<key>begin</key>
			<string>(?i)\bof\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.brackets.idl</string>
			<key>end</key>
			<string>(?i)\s*endcase\b|\s*endswitch\b</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#idl_procedures_in_case_switch</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#allofem</string>
				</dict>
			</array>
		</dict>
		<key>linecontinuationblocks</key>
		<dict>
			<key>begin</key>
			<string>\$.*$</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#allofem</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#idl_properties_in_continuedlines</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.brackets.idl</string>
			<key>end</key>
			<string>^\s+(?!;.*)(?=\S)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#allofembutprocedures</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#idl_properties_in_continuedlines</string>
						</dict>
					</array>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#allofembutprocedures</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#idl_properties_in_continuedlines</string>
				</dict>
			</array>
		</dict>
		<key>end_in_parens</key>
		<dict>
			<key>comment</key>
			<string>end as operator symbol</string>
			<key>match</key>
			<string>\bend\b</string>
			<key>name</key>
			<string>keyword.operator.symbols.idl</string>
		</dict>
		<key>escaped_quote</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\(\\|[abefnprtv'"?]|[0-3]\d{0,2}|[4-7]\d?|x[a-zA-Z0-9]+)</string>
					<key>name</key>
					<string>constant.character.escape.idl</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>invalid.illegal.unknown-escape.idl</string>
				</dict>
			</array>
		</dict>
		<key>float</key>
		<dict>
			<key>comment</key>
			<string>Valid numbers: .1, 1.1, .1e1, 1.1e1, 1e1, .1d1, 1.1d1, 1d1</string>
			<key>match</key>
			<string>(?i)\b(\.\d+|\d+\.?\d*)([ed][\+-]?\d*)?\b</string>
			<key>name</key>
			<string>constant.numeric.idl</string>
		</dict>
    <key>asterisk</key>
    <dict>
      <key>comment</key>
      <string>Asterisk</string>
      <key>match</key>
      <string>(?i)(?&lt;=\(|=|,|\[)\s*\*|&&|\|\|</string>
      <key>name</key>
      <string>constant.numeric.idl</string>
    </dict>
		<key>idl_control_statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Control keywords</string>
					<key>match</key>
					<string>(?i)(?&lt;!\.|\/)\b(begin|break|case|common|compile_opt|continue|do|else|end|endcase|endelse|endfor|endforeach|endif|endrep|endswitch|endwhile|for|foreach|forward_function|function|goto|if|inherits|of|on_ioerror|pro|repeat|switch|then|until|while)\b</string>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Control keywords</string>
					<key>match</key>
					<string>(?i)^\s*else\s*(?=:)</string>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Special case for end, some odd bug somewhere makes this needed to highlight in case-switch statements</string>
					<key>match</key>
					<string>(?i)^\s*end\b</string>
					<key>name</key>
					<string>keyword.control.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Operator keywords</string>
					<key>match</key>
					<string>(?i)(?&lt;!\.)\b(and|eq|ge|gt|le|lt|mod|ne|not|or|xor)\b</string>
					<key>name</key>
					<!-- shoul say keyword.operator.idl, but there is no highlighting if we do that -->
					<string>keyword.control.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>goto jump statement with comment</string>
					<key>match</key>
					<string>(?i)^\s*([a-z_][a-z0-9_$\s]*)(?=:\s*;.*$)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>goto jump statement without comment</string>
					<key>match</key>
					<string>(?i)^\s*([a-z_][a-z0-9_$\s]*):\s*$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.idl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<!-- <key>idl_operator</key>
		<dict>
			<key>comment</key>
			<string>Operator symbols - BREAKS PROPERTIES, DO NOT UNCOMMENT</string>
			<key>match</key>
			<string>(?i)(&gt;|&lt;|&amp;&amp;|\?|:|\||\|\||\+|-|\*|\.\*|/|\./|\\|\.\\|\^|\.\^)</string>
			<key>name</key>
			<string>keyword.operator.symbols.idl</string>
		</dict> -->
		<key>idl_routine_definitions</key>
		<dict>
			<key>patterns</key>
			<array>
        <dict>
					<key>comment</key>
					<string>Procedure method (must be before procedures)</string>
					<key>match</key>
					<string>(?ix)
					(?=(pro)\b) # borrowed from ruby bundle
					(?&lt;=^|\s)(function|pro)\s+ # the function keyword
					(?&gt;\[(.*)\])? # match various different combination of output arguments
					((?&gt;[a-z_][a-z_$0-9]*))?
					(?&gt;\s*=\s*)?
					((?&gt;[a-z_][a-z_$0-9]*::[a-z_][a-z_$0-9]*(?&gt;[?!]|=(?!&gt;))? )) # the function name
					</string>
					<key>name</key>
					<string>meta.function.idl</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
					</dict>
				</dict>
        <dict>
					<key>comment</key>
					<string>Function method (must be before functions)</string>
					<key>match</key>
					<string>(?ix)
					(?=(function)\b) # borrowed from ruby bundle
					(?&lt;=^|\s)(function|pro)\s+ # the function keyword
					(?&gt;\[(.*)\])? # match various different combination of output arguments
					((?&gt;[a-z_][a-z_$0-9]*))?
					(?&gt;\s*=\s*)?
					((?&gt;[a-z_][a-z_$0-9]*::[a-z_][a-z_$0-9]*(?&gt;[?!]|=(?!&gt;))? )) # the function name
					</string>
					<key>name</key>
					<string>meta.function.idl</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.idl-method</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Procedure declarations</string>
					<key>match</key>
					<string>(?ix)
					(?=(pro)\b) # borrowed from ruby bundle
					(?&lt;=^|\s)(function|pro)\s+ # the function keyword
					(?&gt;\[(.*)\])? # match various different combination of output arguments
					((?&gt;[a-z_][a-z_$0-9]*))?
					(?&gt;\s*=\s*)?
					((?&gt;[a-z_][a-z_$0-9]*(?&gt;[?!]|=(?!&gt;))? )) # the function name
					</string>
					<key>name</key>
					<string>support.function.idl-procedure</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Function declarations</string>
					<key>match</key>
					<string>(?ix)
					(?=(function)\b) # borrowed from ruby bundle
					(?&lt;=^|\s)(function|pro)\s+ # the function keyword
					(?&gt;\[(.*)\])? # match various different combination of output arguments
					((?&gt;[a-z_][a-z_$0-9]*))?
					(?&gt;\s*=\s*)?
					((?&gt;[a-z_][a-z_$0-9]*(?&gt;[?!]|=(?!&gt;))? )) # the function name
					</string>
					<key>name</key>
					<string>meta.function.idl</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.output.function.idl</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.idl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_custom_markup</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>IDL routine keywords with boolean values</string>
					<key>match</key>
					<string>(?i)(?<![a-z0-9.])((?<=\(|\s|,)\/\s*[a-z_][a-z0-9_$]*)</string>
					<key>name</key>
					<string>entity.name.tag</string>
				</dict>
			</array>
		</dict>
		<key>idl_sysvar</key>
		<dict>
			<key>comment</key>
			<string>IDL system variables and optional variable access - will fail if system variable is object with methods</string>
			<key>match</key>
			<string>(?i)(\![a-z_][a-z0-9_$]*)(\.|\b)([a-z_][a-z0-9_$]*|\b)</string>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>constant.language.idl</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.idl</string>
				</dict>
			</dict>
		</dict>
		<key>idl_functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>IDL Function Methods</string>
					<key>match</key>
					<string>(?i)(?<=\.|->)[a-z_][a-z0-9_$:]*(?=\()</string>
					<key>name</key>
					<string>entity.name.function.idl-method</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Functions</string>
					<key>match</key>
					<string>(?i)\b[a-z_][a-z0-9_$]*(?=\()</string>
					<key>name</key>
					<string>entity.name.function.idl</string>
				</dict>
			</array>
		</dict>
		<key>idl_procedures_in_case_switch</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>IDL Procedures after case statements</string>
					<key>match</key>
					<string>(?i)(:\s+)((?!begin|if|foreach|for|while|break|continue|goto|case|switch|repeat)[a-z_][a-z0-9$_]*\s*(?=,|\$|$|;.*$))</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure methods after case statements</string>
					<key>match</key>
					<string>(?i)(:\s+[a-z_][a-z0-9$_]*\.)([a-z_][a-z0-9$_]*\s*(?=,|\$|$|;.*$))</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_procedures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>IDL Procedure Methods from pointer notation</string>
					<key>match</key>
					<string>(?i)->([a-z_][a-z0-9_$:]*(?=\,|\s))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure Methods</string>
					<key>match</key>
					<string>(?i)(^\s*[a-z_][a-z0-9_$\.]*\.)([a-z_][a-z0-9_$:]*)(,.*|\s*;.*|\s*)$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_structures</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure Methods from (variables) args/keywords</string>
					<key>match</key>
					<string>(?i)(^\s*\(.*\))(\.[a-z_][a-z0-9_$\.]*\.|\.)([a-z_][a-z0-9_$]*)(,.*|\s*;.*|\s*)$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_structures</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
						<key>4</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure methods in single-line blocks</string>
					<key>match</key>
					<string>(?i)\b(do|repeat|then|else)\s+([a-z_][a-z0-9_$]*\.)([a-z][a-z0-9_$]*(?=,))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedure methods in single-line blocks from (variables)</string>
					<key>match</key>
					<string>(?i)\b(do\s|repeat\s|then\s|else\s)(\s*\(.*\)\.)([a-z][a-z0-9_$]*(?=,))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure-method</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedures in single-line blocks - must be after methods and (variables)</string>
					<key>match</key>
					<string>(?i)\b(do|repeat|then|else)\s+((?!begin|if|foreach|for|while|break|continue|goto|repeat)[a-z_][a-z0-9$_]*\s*(?=,|\$|else|$|;.*$))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>IDL Procedures</string>
					<key>match</key>
					<string>(?i)(^\s*)(?!and\s|eq\s|ge\s|gt\s|le\s|lt\s|mod\s|ne\s|not\s|or\s|xor\s|begin\s|break\s|case\s|common\s|compile_opt\s|continue\s|do\s|else\s|end\s|endcase\s|endelse\s|endfor\s|endforeach\s|endif\s|endrep\s|endswitch\s|endwhile\s|for\s|foreach\s|forward_function\s|function\s|goto\s*,|if\s|inherits\s|of\s|on_ioerror\s|pro\s|repeat\s|switch\s|then\s|until\s|while\s)([a-z_][a-z0-9_$]*(?!\.)(?=\s*,|\s*;.*$|\s*$))</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.idl-procedure</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_structure_tag_names</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Structure tag/property name declarations - only used in braces block above</string>
					<key>match</key>
					<string>(?i)(\s*|{\s*)((?!else)[a-z_][a-z0-9_$]*\s*(?!:\s*begin|::)(?=:))</string>
					<key>name</key>
					<string>entity.name.tag.idl</string>
				</dict>
			</array>
		</dict>
		<key>idl_properties_in_continuedlines</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Getting properties in line continuations, relaxed conditions</string>
					<key>match</key>
					<string>(?i)\.([a-z_](?![a-z0-9_$]*\()[a-z0-9_$]*)(,.*|\s*;.*|\s*)$</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofembutprocedures</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_properties_in_brackets</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Getting properties at bracket</string>
					<key>match</key>
					<string>(?i)\s*([a-z_][a-z0-9_$]*\.(?![a-z_][a-z0-9_$]*\())([a-z_][a-z0-9_$]*)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Getting properties from (variables)</string>
					<key>match</key>
					<string>(?i)\s*(\(.*\)\.(?![a-z_][a-z0-9_$]*\())([a-z_][a-z0-9_$]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_structures</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Structure names</string>
					<key>match</key>
					<string>(?i)({\s*)([a-z_][a-z0-9_$]*\s*(?=,|}))</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Referencing ourself in objects</string>
					<key>match</key>
					<string>(?i)(\bself\b)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Inheritance in structure declaration</string>
					<key>match</key>
					<string>(?i)(\s*inherits\s+)([a-z_][a-z0-9_$]*\s*(?=,|}|\$|\n))</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_control_statements</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Getting properties</string>
					<key>match</key>
					<string>(?i)(\?|&&|#|##|\|\||\*|\/|\+|mod\s|\-|\(|\:|=|,|\^|\[|~|if\s|while\s|until\s|and\s|eq\s|ge\s|gt\s|le\s|lt\s|mod\s|ne\s|not\s|or\s|xor\s)\s*([a-z_][a-z0-9_$]*)(\.[a-z_][a-z0-9_$\.]*\.|\.)([a-z_](?![a-z0-9_$]*\()[a-z0-9_$]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_control_statements</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_structures</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_structures</string>
								</dict>
							</array>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Getting properties from (variables) with nested (properties).like.this</string>
					<key>match</key>
					<string>(?i)(&&|#|##|\|\||\*|\/|\+|mod\s|\-|\(|\:|=|,|\^|\[|~|if\s|while\s|until\s|and\s|eq\s|ge\s|gt\s|le\s|lt\s|mod\s|ne\s|not\s|or\s|xor\s)(\s*\(.*\)\.)([a-z_][a-z0-9_$]*)(\.[a-z_][a-z0-9_$\.]*\.|\.)([a-z_](?![a-z0-9_$]*\()[a-z0-9_$]*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_control_statements</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_structures</string>
								</dict>
							</array>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Getting properties from (variables) with only one property</string>
					<key>match</key>
					<string>(?i)(&&|#|##|\|\||\*|\/|\+|mod\s|\-|\(|\:|=|,|\^|\[|~|if\s|while\s|until\s|and\s|eq\s|ge\s|gt\s|le\s|lt\s|mod\s|ne\s|not\s|or\s|xor\s)(\s*\(.*\)\.)([a-z_](?![a-z0-9_$]*\()[a-z0-9_$]*)(\s*|\s*;.*)</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_control_statements</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#allofem</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
						<key>4</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#all_idl_comments</string>
								</dict>
							</array>
						</dict>
					</dict>
				</dict>
				<dict>
					<key>comment</key>
					<string>Get property of property</string>
					<key>match</key>
					<string>(?i)(?<=\.)[a-z_][a-z0-9_$]*(?=[\.\[\)])</string>
					<key>name</key>
					<string>entity.name.tag.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Setting properties</string>
					<key>match</key>
					<string>(?i)(\s*)([!a-z_][a-z0-9_$]*\.)([a-z_][a-z0-9_$]*)(?=\s*=)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#idl_structures</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#idl_sysvar</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>idl_executive_commands</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Executive commands</string>
					<key>match</key>
					<string>(?i)(^\s*)(\.[a-z_][a-z0-9_$]*\b)</string>
					<key>captures</key>
					<dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>entity.name.tag.idl</string>
						</dict>
					</dict>
				</dict>
			</array>
		</dict>
		<key>integer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>Valid binary integers: '1001'b, '1001'bl, etc.</string>
					<key>match</key>
					<string>(?i)'[01]+'bu?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid binary integers: "1001"b, "1001"bl, etc.</string>
					<key>match</key>
					<string>(?i)"[01]+"bu?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid decimal integers: 1, 0B, 0S, etc.</string>
					<key>match</key>
					<string>(?i)(?&lt;!\.)\b\d+u?(b|s|l|ll)?(?!\.)\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid octal integers numbers: '36'o, '36'ol, etc.</string>
					<key>match</key>
					<string>(?i)'[0-7]+'ou?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid octal integers numbers: "36"o, "36"ol, etc.</string>
					<key>match</key>
					<string>(?i)"[0-7]+"ou?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid hexadecimal integers: 'AF'x</string>
					<key>match</key>
					<string>(?i)'[0-9a-f]+'xu?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid hexadecimal integers: "AF"x</string>
					<key>match</key>
					<string>(?i)"[0-9a-f]+"xu?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
        <dict>
					<key>comment</key>
					<string>Strings that can be confused with numbers using double quotes</string>
					<key>match</key>
					<string>(?i)"[0-9.]*"</string>
					<key>name</key>
					<string>string.quoted.double.idl</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Valid octal integers: "36, "46l, etc. (must come last)</string>
					<key>match</key>
					<string>(?i)"[0-7]+u?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
        <dict>
					<key>comment</key>
					<string>Valid hexadecimal integers: 0xAABBCC</string>
					<key>match</key>
					<string>(?i)0x[0-9a-f]+u?(b|s|l|ll)?\b</string>
					<key>name</key>
					<string>constant.numeric.idl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>end</key>
					<string>"|$</string>
					<key>name</key>
					<string>string.quoted.double.idl</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>end</key>
					<string>'|$</string>
					<key>name</key>
					<string>string.quoted.single.idl</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>comment</key>
			<string>Valid variable. Added meta to disable highlighting</string>
			<key>match</key>
			<string>\b[_a-zA-Z][_a-zA-Z0-9$]*\b</string>
			<key>name</key>
			<string>meta.variable.other.valid.idl</string>
		</dict>
	</dict>
</dict>
</plist>
