{
  "version": "2.0.0",
  "cells": [
    {
      "type": "markdown",
      "content": [
        "Start ENVI, but with the UI so we can see training progress.",
        "",
        "If you already started ENVI, press the \"Stop IDL\" button in the top of the notebook and re-run this cell.",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+ start ENVI with the UI",
        "e = envi()"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Get folders for input and output",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+ get this directory",
        "thisDir = file_dirname(routine_filepath())",
        "",
        ";+ folder for croc training data",
        "folder = thisDir + path_sep() + 'ec-export'",
        "",
        ";+ timestamp for all of our outputs",
        "timestamp = (timestamp()).replace(':', '-')",
        "timestamp = (strsplit(timestamp, '.', /extract))[0]",
        "",
        "; specify the folder we will write our results to",
        "modelDir = strjoin([thisDir, 'models-air', timestamp], path_sep())",
        "if ~file_test(modelDir, /directory) then file_mkdir, modelDir"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "extension = '.dat'"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Where we want the model to go",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+ best model, updated as we go with lowest validation loss",
        "bestUri = modelDir + path_sep() + 'best.h5'",
        "",
        ";+ last mode (last epoch of training)",
        "lastUri = modelDir + path_sep() + 'last.h5'"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Training parameters",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+ random seed for splitting data",
        "seed = 17",
        "",
        ";+ percentage of training data used for validation",
        "validation = 0.2 ; percent from 0 to 1",
        "",
        ";+ background patch ration",
        "bpr = 0.3",
        "",
        ";+ how many times we run through all positive examples of our features",
        "epochs = 100"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Load data and split into training and validation buckets",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; make list for ENVI DL rasters",
        "rasters = list()",
        "",
        "; find files",
        "files = file_search(folder, `*${extension}`, count = nFiles)",
        "if (nFiles eq 0) then message, 'Where are our deep learning rasters?'",
        "",
        "; open DL rasters",
        "foreach file, files do rasters.add, ENVIDeepLearningObjectDetectionRaster(file)",
        "",
        "; convert to array",
        "rasters = rasters.toArray()",
        "",
        "; get the number of rasters for validation",
        "nTraining = floor(nFiles * (1.0 - validation))",
        "nValidation = nFiles - nTraining",
        "",
        "; make random index",
        "idx = sort(randomu(seed, nFiles))",
        "",
        "; split into training and validation",
        "; training = rasters[idx[0 : nTraining - 1]]",
        "training = rasters[*]",
        "validation = rasters[idx[-nValidation : -1]]"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Create our training task and specify model parameters",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; Get the task from the catalog of ENVITasks",
        "Task = ENVITask('TrainTensorFlowObjectModel')",
        "",
        ";+ specify the number of samples per step",
        "Task.patches_per_batch = 3",
        "",
        "; specify training data and how long to train",
        "Task.training_rasters = training",
        "Task.validation_rasters = validation",
        "Task.epochs = epochs",
        "Task.background_patch_ratio = bpr",
        "",
        "; set our outputs",
        "Task.output_model_uri = bestUri",
        "Task.output_last_model_uri = lastUri"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "Task.execute"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "Task.execute"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "Task.execute"
      ],
      "metadata": {},
      "outputs": [
        {
          "items": [
            {
              "mime": "text/plain",
              "content": [
                "% tensorflow.python.framework.errors_impl.ResourceExhaustedError: failed to allocate memory [Op:Sub]",
                "% Execution halted at: $MAIN$              1 D:\\luno\\notebook_cell.pro",
                ""
              ]
            }
          ],
          "metadata": {
            "id": "not-saved"
          }
        }
      ]
    },
    {
      "type": "code",
      "content": [
        "orig = e.openRaster('D:\\luno\\sky-sat\\mosaics\\SkySatScene.ntf')",
        "raster = dlAutoPrepareRaster(orig)",
        "e.data.add, raster"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "stop"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "Task.execute"
      ],
      "metadata": {},
      "outputs": [
        {
          "items": [
            {
              "mime": "text/plain",
              "content": [
                "% Exception encountered when calling layer \"RetinaNet\" \"                 f\"(type RetinaNet).",
                "% Execution halted at: $MAIN$              1 D:\\luno\\notebook_cell.pro",
                ""
              ]
            }
          ],
          "metadata": {
            "id": "not-saved"
          }
        }
      ]
    },
    {
      "type": "code",
      "content": [
        "Task.execute"
      ],
      "metadata": {},
      "outputs": [
        {
          "items": [
            {
              "mime": "text/plain",
              "content": [
                "% {{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:GPU:0}} Input to reshape is a",
                "       tensor with 2 values, but the requested shape has 1 [Op:Reshape]",
                "% Execution halted at: $MAIN$              1 D:\\luno\\notebook_cell.pro",
                ""
              ]
            }
          ],
          "metadata": {
            "id": "not-saved"
          }
        }
      ]
    },
    {
      "type": "markdown",
      "content": [
        "Train! Now this will take a while, so don't close VSCode or run any other notebooks.",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "Task.execute"
      ],
      "metadata": {},
      "outputs": [
        {
          "items": [
            {
              "mime": "text/plain",
              "content": [
                "% {{function_node __wrapped__Reshape_device_/job:localhost/replica:0/task:0/device:GPU:0}} Input to reshape is a",
                "       tensor with 4 values, but the requested shape has 1 [Op:Reshape]",
                "% Execution halted at: $MAIN$              1 D:\\luno\\notebook_cell.pro",
                ""
              ]
            }
          ],
          "metadata": {
            "id": "not-saved"
          }
        }
      ]
    },
    {
      "type": "markdown",
      "content": [
        "Optionally, classify some of our validation images so we can see what our results look like.",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; stopped so we dont accidentally process all of our images which will take a while!",
        "stop"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Specify the output folder and open our model",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+ specify output folder",
        "validationDir = modelDir + path_sep() + 'validation'",
        "",
        "; make sure it exists",
        "if ~file_test(validationDir, /directory) then file_mkdir, validationDir"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Open our model!",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ";+ restore the model to process our data with",
        "model = ENVITensorFlowObjectModel(lastUri)"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Process our data!",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; specify the number of files to process",
        "nProcess = 10 ; nValidation",
        "",
        ";+ get the validation files",
        "validationUris = files[idx[-nValidation : -1]]",
        "",
        "; process each file",
        "foreach file, validationUris, i do begin",
        "  ; stop if we need to",
        "  if (i ge nProcess) then break",
        "",
        "  ;+ get output file and account for best or last model",
        "  out = validationDir + path_sep() + file_basename(file, '.dat') + (model.uri eq bestUri ? '_best.dat' : '_last.dat')",
        "",
        "  ; skip if it exists",
        "  if file_test(out) then continue",
        "",
        "  ; alert user",
        "  print, `Processing image ${i + 1} of ${nProcess}`",
        "",
        "  ; open as raster",
        "  raster = e.openRaster(file)",
        "",
        "  ; process",
        "  Task = ENVITask('TensorFlowObjectClassification')",
        "  Task.input_raster = raster",
        "  Task.input_model = model",
        "  Task.output_classification_raster_uri = out",
        "  Task.execute",
        "",
        "  ; clean up",
        "  raster.close",
        "endforeach"
      ],
      "metadata": {},
      "outputs": []
    }
  ]
}