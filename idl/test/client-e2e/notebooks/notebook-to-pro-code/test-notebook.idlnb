{
  "version": "2.0.0",
  "cells": [
    {
      "type": "markdown",
      "content": [
        "First three cells are empty and should not run or generate eny output",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "",
        "",
        "",
        "     ",
        "",
        "",
        ""
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; do nothing"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; run when we dont have compile opt or main level",
        "arr = findgen(42)",
        "help, arr"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; we have compile_opt idl2, so we should have a long",
        "a = 15",
        "help, a"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; no output from running this cell",
        ";+",
        ";-",
        "pro test1",
        "  compile_opt idl2",
        "",
        "  print, 42",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; run our procedure from above",
        "test1"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; run when we have compile opt and main level end",
        "",
        "compile_opt idl2",
        "",
        "print, 5",
        "",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Some"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "markdown",
      "content": [
        "Markdown"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; if we have a main level, then run it",
        ";+",
        "; :Returns: any",
        ";",
        ";-",
        "function foo1",
        "  compile_opt idl2",
        "  return, 42",
        "end",
        "",
        "; we have compile_opt idl2, so we should have a long",
        "a = 15",
        "help, a",
        "",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; main level programs dont need to have an end",
        ";+",
        "; :Returns: any",
        ";",
        ";-",
        "function foo2",
        "  compile_opt idl2",
        "  return, 42",
        "end",
        "",
        "; we have compile_opt idl2, so we should have a long",
        "a = 15",
        "help, a"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; embed graphics",
        "p = plot(/test)"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; run cell and dont capture image output (or any output)",
        "!null = 42"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; embed more than one graphic",
        "p1 = plot(/test)",
        "p2 = surface(/test)",
        "p3 = barplot(/test)"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; when we have a stop or syntax error, dont stop at it",
        ";+",
        ";-",
        "pro mypro",
        "  compile_opt idl2",
        "  stop",
        "end"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; run routine with a stop",
        "mypro"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; verify we are at the main level (one item in stack trace)",
        "print, n_elements(scope_traceback()), /implied_print"
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; dont execute when we have syntax errors 1",
        "a ="
      ],
      "metadata": {},
      "outputs": []
    },
    {
      "type": "code",
      "content": [
        "; dont execute when we have syntax errors 2",
        ";+",
        ";-",
        "pro syntax_error",
        "  compile_opt idl2",
        "",
        "  a =",
        "end"
      ],
      "metadata": {},
      "outputs": []
    }
  ]
}