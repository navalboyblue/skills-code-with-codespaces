import { STYLE_FLAG_LOOKUP } from '@idl/assembling/config';

import { IAutoAssemblerTest } from '../tests.interface';

/**
 * Automated tests to verify we assemble code correctly based on
 * style and other settings.
 *
 * None of these tests honor "autoFix" because there is a secondary test
 * that makes sure our formatted code is the same as the original.
 */
export const AUTO_ASSEMBLER_TESTS: IAutoAssemblerTest[] = [
  {
    suiteName: `Verify arg formatting`,
    fileName: `auto-doc.args.spec.ts`,
    tests: [
      {
        name: `matches arg definitions`,
        code: [
          `;+`,
          `; :Arguments:`,
          `;   arg1: in, required, Array<Number | String>`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg2: in, required, Array<Number>`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg3: in, required, Array<any>`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;`,
          `;-`,
          `pro pro3, arg1, arg2, ARG3`,
          `  compile_opt idl3`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify doc formatting`,
    fileName: `auto-doc.basic.spec.ts`,
    tests: [
      {
        name: `close and auto populate existing docs block`,
        code: [
          `;+`,
          `;`,
          `function myPro, a, c, kw1 = kw1, kw=kw`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          ``,
          `  return, 42`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `capture default content and re-work`,
        code: [
          `;+`,
          `; Header`,
          `;-`,
          `pro myPro`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `add docs for procedures automatically`,
        code: [
          `pro myPro, a, c, kw1 = kw1, kw=kw`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          ``,
          `  return, 42`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `add docs for functions automatically`,
        code: [
          `function myPro2, a, c, kw1 = kw1, kw=kw`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          ``,
          `  return, 42`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `add docs for multiple routines at once`,
        code: [
          `pro myPro, a, c, kw1 = kw1, kw=kw`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          ``,
          `end`,
          ``,
          `function myPro2, a, c, kw1 = kw1, kw=kw`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          ``,
          `  return, 42`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `handle, and format correctly, multi-line headers`,
        code: [
          `;+`,
          `; :Something fancy:`,
          `;   Really cool information `,
          `; sdf`,
          `;-`,
          `pro test_things`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: ` uses proper external name for keyword in auto-docs`,
        code: [
          `pro test_things2, a, b, kw2 = kw222`,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: ` for only arguments`,
        code: [`pro test_things2, a, b`, `  compile_opt idl2`, ``, `end`],
        config: {
          autoDoc: true,
        },
      },
      {
        name: ` for only keywords`,
        code: [
          `pro test_things2, kw222=kw2, kw3 = kw3`,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify auto-doc when below`,
    fileName: `auto-doc.below.spec.ts`,
    tests: [
      {
        name: `does not add docs above`,
        code: [
          `pro auto_doc_dont_add_above, input_raster = input_raster, output_raster_uri = output_raster_uri, third = third`,
          `;+`,
          `; :Keywords:`,
          `;   input_raster: in, optional, ENVIRaster`,
          `;     Thing 1`,
          `;   output_raster_uri: in, optional, String`,
          `;     Thing 2`,
          `;   third: bidirectional, optional, any`,
          `;     Thing 3`,
          `;`,
          `;-`,
          `compile_opt idl2`,
          ``,
          `; get the current session of ENVI`,
          `e = envi(/current)`,
          `if (e eq !null) then begin`,
          `  message, 'ENVI has not started yet, required!'`,
          `endif`,
          `idltasktest, input_raster = 5`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `updates comment blocks right`,
        code: [
          `pro auto_doc_dont_add_above, input_raster = input_raster, output_raster_uri = output_raster_uri, third2 = third`,
          `;+`,
          `; :Keywords:`,
          `;   input_raster: in, optional, ENVIRaster`,
          `;     Thing 1`,
          `;   output_raster_uri: in, optional, String`,
          `;     Thing 2`,
          `;   third: bidirectional, optional, any`,
          `;     Thing 3`,
          `;`,
          `;-`,
          `compile_opt idl2`,
          ``,
          `; get the current session of ENVI`,
          `e = envi(/current)`,
          `if (e eq !null) then begin`,
          `  message, 'ENVI has not started yet, required!'`,
          `endif`,
          `idltasktest, input_raster = 5`,
          `end`,
          ``,
          `; main level program`,
          `compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Convert old IDL Doc comments`,
    fileName: `auto-doc.convert-idldoc-legacy.spec.ts`,
    tests: [
      {
        name: `for procedures`,
        code: [
          `;+`,
          `; LatLon_Distance`,
          `;   Computes the distance of a rhumb line connecting two points on a sphere or spheroid`,
          `;`,
          `; @param lon1, lat1 {input} Longitude and latitude of the 1st point, p0`,
          `; @param lon2, lat2 {input} Longitude and latitude of the 2nd point, p1`,
          `; @param method {input} The method to be used, options are:`,
          `;   1 - Haversine (sphere) - selected by default`,
          `;   2 - Vincenty  (spheroid)`,
          `;`,
          `; @keyword meters  Set this keyword to return the distance in meters`,
          `; @keyword radians Set this keyword if inputs are specified in radians (the default is degrees)`,
          `; @keyword radius  Set this keyword to a value specifying the radius of the sphere to be used, in [km]`,
          `;   the default value is the Authalic radius (equal area hyothetical perfect sphere) = 6371.0072`,
          `; @keyword semimajor_axis Set this keyword to the length of the semimajor axis of the reference ellipsoid, in [m]`,
          `;   the default value is the WGS-84 6378137`,
          `; @keyword semiminor_axis Set this keyword to the length of the semiminor axis of the reference ellipsoid, in [m]`,
          `;   the default value is the WGS-84 6356752.314245`,
          `;`,
          `; @references`,
          `;   Haversine formula ( great-circle distance between two points on a sphere )`,
          `;     https://en.wikipedia.org/wiki/Haversine_formula`,
          `;   Vincenty formula ( distance between two points on the surface of a spheroid )`,
          `;     https://en.wikipedia.org/wiki/Vincenty%27s_formulae`,
          `;     https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf`,
          `;`,
          `; @history`,
          `;   Thu Jul 29, 2021 - Introduce the Vincenty equation (computation of distances over an spheroid)`,
          `;   Sun Apr 23, 2023 - Fix the Vincenty calculation at latitudes close to zero`,
          `;   Wed May 10, 2023 - Allow arrays in the Vincenty method`,
          `;-`,
          `pro idltasktest, lon1, lat1, lon2, lat2, method, meters = meters, radians = radians, radius  = radius, semimajor_axis = semimajor_axis, semiminor_axis = semiminor_axis`,
          `  compile_opt idl2 `,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `for functions`,
        code: [
          `;+`,
          `; LatLon_Distance`,
          `;   Computes the distance of a rhumb line connecting two points on a sphere or spheroid`,
          `;`,
          `; @param lon1, lat1 {input} Longitude and latitude of the 1st point, p0`,
          `; @param lon2, lat2 {input} Longitude and latitude of the 2nd point, p1`,
          `; @param method {input} The method to be used, options are:`,
          `;   1 - Haversine (sphere) - selected by default`,
          `;   2 - Vincenty  (spheroid)`,
          `;`,
          `; @keyword meters  Set this keyword to return the distance in meters`,
          `; @keyword radians Set this keyword if inputs are specified in radians (the default is degrees)`,
          `; @keyword radius  Set this keyword to a value specifying the radius of the sphere to be used, in [km]`,
          `;   the default value is the Authalic radius (equal area hyothetical perfect sphere) = 6371.0072`,
          `; @keyword semimajor_axis Set this keyword to the length of the semimajor axis of the reference ellipsoid, in [m]`,
          `;   the default value is the WGS-84 6378137`,
          `; @keyword semiminor_axis Set this keyword to the length of the semiminor axis of the reference ellipsoid, in [m]`,
          `;   the default value is the WGS-84 6356752.314245`,
          `;`,
          `; @returns The distance between the 2 points, [km] by default`,
          `;`,
          `; @references`,
          `;   Haversine formula ( great-circle distance between two points on a sphere )`,
          `;     https://en.wikipedia.org/wiki/Haversine_formula`,
          `;   Vincenty formula ( distance between two points on the surface of a spheroid )`,
          `;     https://en.wikipedia.org/wiki/Vincenty%27s_formulae`,
          `;     https://www.ngs.noaa.gov/PUBS_LIB/inverse.pdf`,
          `;`,
          `; @history`,
          `;   Thu Jul 29, 2021 - Introduce the Vincenty equation (computation of distances over an spheroid)`,
          `;   Sun Apr 23, 2023 - Fix the Vincenty calculation at latitudes close to zero`,
          `;   Wed May 10, 2023 - Allow arrays in the Vincenty method`,
          `;-`,
          `function idltasktest, lon1, lat1, lon2, lat2, method, meters = meters, radians = radians, radius  = radius, semimajor_axis = semimajor_axis, semiminor_axis = semiminor_axis`,
          `  compile_opt idl2 `,
          ``,
          `  return, 1`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify formatting`,
    fileName: `auto-doc.example-code.spec.ts`,
    tests: [
      {
        name: `for example blocks moves`,
        code: [
          `; TODO: something`,
          `pro test_things, a, b, c`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `;+`,
          `; :Description:`,
          `; My favorite procedure`,
          `; `,
          `; `,
          `; `,
          `; :Examples:`,
          `; `,
          `;                     Open an image in ENVI and display in a notebook:`,
          `; `,
          `;                     \`\`\`idl`,
          `;                     ; Start the application`,
          `;                     e = envi(/headless)`,
          `; `,
          `;                     ; Open an input file`,
          `;                     file = filepath('qb_boulder_msi', subdir = ['data'], $`,
          `;                       root_dir = e.root_dir)`,
          `;                     raster = e.openRaster(File)`,
          `; `,
          `;                     ; display in the current notebook cell`,
          `;                     e.displayInNotebook, raster`,
          `;                     \`\`\``,
          `;-`,
          `pro test_things2`,
          `  compile_opt idl2`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify complex formatting`,
    fileName: `auto-doc.complex2.spec.ts`,
    tests: [
      {
        name: `moves things correctly`,
        code: [
          `; TODO: something`,
          `pro test_things, a, b, c`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `;+`,
          `;-`,
          `pro test_things2`,
          `  compile_opt idl2`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify complex formatting`,
    fileName: `auto-doc.complex3.spec.ts`,
    tests: [
      {
        name: `moves main level correctly`,
        code: [
          `; TODO: something`,
          `pro test_things`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `test_things`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify complex formatting`,
    fileName: `auto-doc.complex4.spec.ts`,
    tests: [
      {
        name: `moves main level correctly`,
        code: [
          `;+`,
          `; :Description:`,
          `;    Function which will initialize the bdige_it object and start all bridges. When bridges are initialized`,
          `;    they are done so in parallel, but whe function will not return until every bridge is idle again.`,
          `;`,
          `; :Params:`,
          `;    nbridges: in, required, type=int`,
          `;       The number of bridges that you want to create`,
          `;`,
          `; :Keywords:`,
          `;    INIT : in, optional, type=strarr`,
          `;       Optional argument which allows you to pass in a string array of extra commands`,
          `;       to have each IDL_IDLBridge object execute upon creation.`,
          `;    MSG : in, optional, type=string`,
          `;       Optional argument to show the message prefix when a bridge process has completed for the TIME`,
          `;       keyword in bridge_it::run and bridge_it::run().`,
          `;    LOGDIR : in, optional, type=string`,
          `;       Specify the directory that the log file will be written to. The log file is just a text file with`,
          `;       all of the IDL Console output from each child process.`,
          `;    NREFRESH : in, optional, type=long`,
          `;       Specify the number of bridge processes to execute before closing and re-starting the`,
          `;       child process. Necessary for some ENVI routines so that we don't have memory fragmentation`,
          `;       regarding opening lots of small rasters.`,
          `;    PREFIX : in, optional, type=string, default='_KW_'`,
          `;       This optional keyword specifies the prefix which is used to differentiate between arguments and`,
          `;       keywords when it comes time to parse the arguments and keyword that will be passed into a routine.`,
          `;`,
          `; :Author: Zachary Norman - GitHub: [znorman-harris](https://github.com/znorman-harris)`,
          `;`,
          `;-`,
          `function bridge_it::Init, nbridges, INIT = init, MSG = msg, LOGDIR = logdir, NREFRESH = nrefresh, PREFIX = prefix`,
          `  compile_opt idl2, hidden`,
          `  on_error, 2`,
          ``,
          `  return, 1`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify type formatting uses display names`,
    fileName: `auto-doc.non-idl-display-names.spec.ts`,
    tests: [
      {
        name: `matches arg definitions`,
        code: [
          `;+`,
          `; :Arguments:`,
          `;   arg1: in, required, enviraster`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg2: in, required, idl_variable`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg3: in, required, plot`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;`,
          `;-`,
          `pro pro3, arg1, arg2, arg3`,
          `  compile_opt idl3`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Only use AutoDoc`,
    fileName: `auto-doc.only.spec.ts`,
    tests: [
      {
        name: `and leave everything else the same`,
        code: [
          `function dist,n,m  ;Return a rectangular array in which each pixel = euclidian`,
          `;distance from the origin.`,
          `compile_opt idl2`,
          ``,
          `on_error,2              ;Return to caller if an error occurs`,
          ``,
          `n1 = n[0]`,
          `m1 = (n_elements(m) le 0) ? n1 : m[0]`,
          `x=findgen(n1)    ;Make a row`,
          `x = (x < (n1-x)) ^ 2  ;column squares`,
          ``,
          `a = FLTARR(n1,m1,/NOZERO)  ;Make array`,
          ``,
          `for i=0L, m1/2 do begin  ;Row loop`,
          `y = sqrt(x + i^2.) ;Euclidian distance`,
          `a[0,i] = y  ;Insert the row`,
          `if i ne 0 then a[0, m1-i] = y ;Symmetrical`,
          `endfor`,
          `return,a`,
          `end`,
        ],
        config: {
          autoDoc: true,
          styleAndFormat: false,
        },
      },
    ],
  },
  {
    suiteName: `Only use AutoDoc`,
    fileName: `auto-doc.only2.spec.ts`,
    tests: [
      {
        name: `and dont fix problems`,
        code: [`pro test, a, b, c`, `end`, ``, `test`, `end`],
        config: {
          autoDoc: true,
          styleAndFormat: false,
          autoFix: false,
        },
      },
    ],
  },
  {
    suiteName: `Verify parameter formatting`,
    fileName: `auto-doc.parameters.spec.ts`,
    tests: [
      {
        name: `sort arguments by appearance and add bad at the end`,
        code: [
          `;+`,
          `; :Args:`,
          `;    a: in, required, int, private`,
          `;     Some cool statement`,
          `;   b: in, required, string`,
          `;     Some cool statement`,
          `;    c: in, required, int, private`,
          `;     Some cool statement`,
          `;`,
          `;-`,
          `pro myPro, a, c`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `sort keywords alphabetically and add bad at the end`,
        code: [
          `;+`,
          `; :Keywords:`,
          `;   kw2: in, required, int`,
          `;     Some cool statement`,
          `;   kw: in, required, string`,
          `;     Some cool statement across`,
          `;`,
          `;     multiple lines`,
          `;   kw1: in, required, string`,
          `;     Some cool statement across`,
          `;`,
          `;-`,
          `pro myPro, kw1 = kw1, kw=kw`,
          ` compile_opt idl2`,
          ` print, 'Hello world'`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify arg ordering`,
    fileName: `auto-doc.order-args.spec.ts`,
    tests: [
      {
        name: `matches the argument definition`,
        code: [
          `;+`,
          `; :Arguments:`,
          `;   a01: in, required, any`,
          `;     Placeholder docs for argument or keyword`,
          `;   a02: in, required, array`,
          `;     Placeholder docs for argument or keyword`,
          `;   a03: in, required, bigint`,
          `;     Placeholder docs for argument or keyword`,
          `;   a04: in, required, biginteger`,
          `;     Placeholder docs for argument or keyword`,
          `;`,
          `;-`,
          `pro my_thing, $`,
          `  a03, a04, a01, a02`,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify autoDoc`,
    fileName: `auto-doc.disable-preserved.spec.ts`,
    tests: [
      {
        name: `preserves idl-disabled`,
        code: [
          `;+`,
          `; idl-disable`,
          `; idl-disable-line`,
          `; idl-disable-next-line`,
          `;`,
          `; :Arguments:`,
          `;   a01: in, required, any`,
          `;     Placeholder docs for argument or keyword`,
          `;   a02: in, required, array`,
          `;     Placeholder docs for argument or keyword`,
          `;   a03: in, required, bigint`,
          `;     Placeholder docs for argument or keyword`,
          `;   a04: in, required, biginteger`,
          `;     Placeholder docs for argument or keyword`,
          `;`,
          `;-`,
          `pro my_thing, $`,
          `  a03, a04, a01, a02`,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `preserves idl-disabled`,
        code: [
          `;+`,
          `; :Description:`,
          `;   idl-disable`,
          `;   idl-disable-line`,
          `;   idl-disable-next-line`,
          `;`,
          `; :Arguments:`,
          `;   a01: in, required, any`,
          `;     Placeholder docs for argument or keyword`,
          `;   a02: in, required, array`,
          `;     Placeholder docs for argument or keyword`,
          `;   a03: in, required, bigint`,
          `;     Placeholder docs for argument or keyword`,
          `;   a04: in, required, biginteger`,
          `;     Placeholder docs for argument or keyword`,
          `;`,
          `;-`,
          `pro my_thing, $`,
          `  a03, a04, a01, a02`,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify type formatting for`,
    fileName: `auto-doc.task-types.spec.ts`,
    tests: [
      {
        name: `ENVI and IDL Tasks`,
        code: [
          `;+`,
          `; :Arguments:`,
          `;   arg1: in, required, envitask`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg2: in, required, idltask`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg3: in, required, ENVITask<buildmosaicraster> | ENVITask<SubsetRaster>`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg4: in, required, IDLTask<S3_Download>`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;   arg5: in, required, ENVITask<BuildMosaicRaster | SubsetRaster>`,
          `;     Placeholder docs for argument, keyword, or property`,
          `;`,
          `;-`,
          `pro pro3, arg1, arg2, arg3, arg4, arg5`,
          `  compile_opt idl3`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify type formatting`,
    fileName: `auto-doc.types.spec.ts`,
    tests: [
      {
        name: `parses and gives normalized appearance for all IDL types`,
        code: [
          `;+`,
          `; :Arguments:`,
          `;   a01: in, required, any`,
          `;     Placeholder docs for argument or keyword`,
          `;   a02: in, required, array`,
          `;     Placeholder docs for argument or keyword`,
          `;   a03: in, required, bigint`,
          `;     Placeholder docs for argument or keyword`,
          `;   a04: in, required, biginteger`,
          `;     Placeholder docs for argument or keyword`,
          `;   a05: in, required, binary`,
          `;     Placeholder docs for argument or keyword`,
          `;   a06: in, required, bool`,
          `;     Placeholder docs for argument or keyword`,
          `;   a07: in, required, boolean`,
          `;     Placeholder docs for argument or keyword`,
          `;   a08: in, required, byte`,
          `;     Placeholder docs for argument or keyword`,
          `;   a09: in, required, complex`,
          `;     Placeholder docs for argument or keyword`,
          `;   a10: in, required, dcomplex`,
          `;     Placeholder docs for argument or keyword`,
          `;   a11: in, required, doublecomplex`,
          `;     Placeholder docs for argument or keyword`,
          `;   a12: in, required, dict`,
          `;     Placeholder docs for argument or keyword`,
          `;   a13: in, required, dictionary`,
          `;     Placeholder docs for argument or keyword`,
          `;   a14: in, required, float64`,
          `;     Placeholder docs for argument or keyword`,
          `;   a15: in, required, double`,
          `;     Placeholder docs for argument or keyword`,
          `;   a16: in, required, float32`,
          `;     Placeholder docs for argument or keyword`,
          `;   a17: in, required, float`,
          `;     Placeholder docs for argument or keyword`,
          `;   a18: in, required, hash`,
          `;     Placeholder docs for argument or keyword`,
          `;   a19: in, required, hex`,
          `;     Placeholder docs for argument or keyword`,
          `;   a20: in, required, int`,
          `;     Placeholder docs for argument or keyword`,
          `;   a21: in, required, integer`,
          `;     Placeholder docs for argument or keyword`,
          `;   a22: in, required, list`,
          `;     Placeholder docs for argument or keyword`,
          `;   a23: in, required, long`,
          `;     Placeholder docs for argument or keyword`,
          `;   a24: in, required, long64`,
          `;     Placeholder docs for argument or keyword`,
          `;   a25: in, required, null`,
          `;     Placeholder docs for argument or keyword`,
          `;   a26: in, required, number`,
          `;     Placeholder docs for argument or keyword`,
          `;   a27: in, required, class`,
          `;     Placeholder docs for argument or keyword`,
          `;   a28: in, required, object`,
          `;     Placeholder docs for argument or keyword`,
          `;   a29: in, required, octal`,
          `;     Placeholder docs for argument or keyword`,
          `;   a30: in, required, orderedhash`,
          `;     Placeholder docs for argument or keyword`,
          `;   a31: in, required, pointer`,
          `;     Placeholder docs for argument or keyword`,
          `;   a32: in, required, string`,
          `;     Placeholder docs for argument or keyword`,
          `;   a33: in, required, structure`,
          `;     Placeholder docs for argument or keyword`,
          `;   a34: in, required, uint`,
          `;     Placeholder docs for argument or keyword`,
          `;   a35: in, required, unsignedint`,
          `;     Placeholder docs for argument or keyword`,
          `;   a36: in, required, unsignedinteger`,
          `;     Placeholder docs for argument or keyword`,
          `;   a37: in, required, ulong`,
          `;     Placeholder docs for argument or keyword`,
          `;   a38: in, required, unsignedlong`,
          `;     Placeholder docs for argument or keyword`,
          `;   a39: in, required, ulong64`,
          `;     Placeholder docs for argument or keyword`,
          `;   a40: in, required, unsignedlong64`,
          `;     Placeholder docs for argument or keyword`,
          `;`,
          `;-`,
          `pro my_thing, $`,
          `  a01, a02, a03, a04, a05, a06, a07, a08, a09, a10, $`,
          `  a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, $`,
          `  a21, a22, a23, a24, a25, a26, a27, a28, a29, a30, $`,
          `  a31, a32, a33, a34, a35, a36, a37, a38, a39, a40`,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Verify doc formatting`,
    fileName: `auto-doc.non-idl-doc.spec.ts`,
    tests: [
      {
        name: `for non IDL Doc styled docs`,
        code: [
          `;+`,
          `; NAME:`,
          `;  DIST`,
          `;`,
          `; PURPOSE:`,
          `;  Create a rectangular array in which each element is proportional`,
          `;  to its frequency.  This array may be used for a variety`,
          `;  of purposes, including frequency-domain filtering and`,
          `;  making pretty pictures.`,
          `;`,
          `; CATEGORY:`,
          `;  Signal Processing.`,
          `;`,
          `; CALLING SEQUENCE:`,
          `;  Result = DIST(N [, M])`,
          `;`,
          `; INPUTS:`,
          `;  N = number of columns in result.`,
          `;  M = number of rows in result.  If omitted, N is used to return`,
          `;    a square array.`,
          `;`,
          `; OUTPUTS:`,
          `;  Returns an (N,M) floating array in which:`,
          `;`,
          `;  R(i,j) = SQRT(F(i)^2 + G(j)^2)   where:`,
          `;     F(i) = i  IF 0 <= i <= n/2`,
          `;          = n-i  IF i > n/2`,
          `;     G(i) = i  IF 0 <= i <= m/2`,
          `;          = m-i  IF i > m/2`,
          `;`,
          `; SIDE EFFECTS:`,
          `;  None.`,
          `;`,
          `; RESTRICTIONS:`,
          `;  None.`,
          `;`,
          `; PROCEDURE:`,
          `;  Straightforward.  The computation is done a row at a time.`,
          `;`,
          `; MODIFICATION HISTORY:`,
          `;  Very Old.`,
          `;   SMR, March 27, 1991 - Added the NOZERO keyword to increase efficiency.`,
          `;        (Recomended by Wayne Landsman)`,
          `;  DMS, July, 1992.  - Added M parameter to make non-square arrays.`,
          `;   CT, RSI, March 2000: Changed i^2 to i^2. to avoid overflow.`,
          `;-`,
          `function dist,n,m  ;Return a rectangular array in which each pixel = euclidian`,
          `    ;distance from the origin.`,
          `compile_opt idl2`,
          ``,
          `on_error,2              ;Return to caller if an error occurs`,
          ``,
          `n1 = n[0]`,
          `m1 = (n_elements(m) le 0) ? n1 : m[0]`,
          `x=findgen(n1)    ;Make a row`,
          `x = (x < (n1-x)) ^ 2  ;column squares`,
          ``,
          `a = FLTARR(n1,m1,/NOZERO)  ;Make array`,
          ``,
          `for i=0L, m1/2 do begin  ;Row loop`,
          `  y = sqrt(x + i^2.) ;Euclidian distance`,
          `  a[0,i] = y  ;Insert the row`,
          `  if i ne 0 then a[0, m1-i] = y ;Symmetrical`,
          `endfor`,
          `return,a`,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Apply keyword formatting`,
    fileName: `auto-doc.format-keywords.spec.ts`,
    tests: [
      {
        name: `so docs match code style`,
        code: [
          `;+`,
          `; :Description:`,
          `;   My sample procedure with default "modern" formatting`,
          `;`,
          `; :Arguments:`,
          `;   arg1: in, required, Boolean`,
          `;     My favorite argument`,
          `;   arg2: in, optional, Boolean`,
          `;     My second favorite argument`,
          `;`,
          `; :Keywords:`,
          `;   KW1: in, required, Boolean`,
          `;     My favorite keyword`,
          `;   KW2: in, optional, Boolean`,
          `;     My second favorite keyword`,
          `;`,
          `;-`,
          `pro mypro_modern, arg1, arg2, kw1 = kw1, kw2 = kw2`,
          `  compile_opt idl2, hidden`,
          ``,
          `  ;+ reference to our super cool and awesome plot`,
          `  a = plot(/test)`,
          ``,
          `  ; sample if statement`,
          `  if !true then begin`,
          `    print, 42`,
          `  endif else begin`,
          `    print, 84`,
          `  endelse`,
          ``,
          `  ; sample for loop`,
          `  foreach val, var, key do begin`,
          ``,
          `  endforeach`,
          ``,
          `  ; sample ENVI routine`,
          `  e = envi()`,
          `  r = ENVIRaster(metadata = meta) ; formatting matches docs`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
          style: {
            keywords: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
    ],
  },
  {
    suiteName: `Generate structure docs`,
    fileName: `auto-doc.structures.spec.ts`,
    tests: [
      {
        name: `to automatically add them`,
        code: [
          `pro pro4__define`,
          `  compile_opt idl2`,
          ``,
          `  !null = {MyStruct, inherits IDL_object, prop: 1, prop2: 4}`,
          ``,
          `  !null = {mystruct2, inherits IDL_object, prop: 1, prop2: 4}`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `to do nothing without a class/structure definition routine`,
        code: [
          `pro pro4`,
          `  compile_opt idl2`,
          ``,
          `  !null = {MyStruct, inherits IDL_object, prop: 1, prop2: 4}`,
          ``,
          `  !null = {mystruct2, inherits IDL_object, prop: 1, prop2: 4}`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `add missing properties and sort alphabetically with bad at the end`,
        code: [
          `;+`,
          `; :MyStruct:`,
          `;   propFake: any`,
          `;     Placeholder docs for argument or keyword`,
          `;   prop2: any`,
          `;     Placeholder docs for argument or keyword`,
          `;`,
          `;-`,
          `pro pro4__define`,
          `  compile_opt idl2`,
          ``,
          `  !null = {MyStruct, inherits IDL_object, prop: 1, prop2: 4}`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
      {
        name: `with no properties`,
        code: [
          `pro pro4__define`,
          `  compile_opt idl2`,
          ``,
          `  !null = {MyStruct}`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Generate structure docs`,
    fileName: `auto-doc.structures.2.spec.ts`,
    tests: [
      {
        name: `and verify spacing for empty structures`,
        code: [
          `pro pro4__define`,
          `  compile_opt idl2`,
          ``,
          `  !null = {struct1}`,
          ``,
          `  !null = {struct2}`,
          ``,
          `  !null = {struct3, prop: 'socool'}`,
          ``,
          `end`,
        ],
        config: {
          autoDoc: true,
        },
      },
    ],
  },
  {
    suiteName: `Keep tokens after main level programs`,
    fileName: `format.after-main.spec.ts`,
    tests: [
      {
        name: `example 1`,
        code: [`compile_opt idl2`, ``, `a = 5`, `end`, `; comment`, `b = 17`],
      },
    ],
  },
  {
    suiteName: `Keep tokens after line continuations`,
    fileName: `format.after-line-continuation.spec.ts`,
    tests: [
      {
        name: `example 1`,
        code: [
          ``,
          `compile_opt idl2`,
          `; thing`,
          `a = $ something bad ;`,
          `  5`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify array formatting`,
    fileName: `format.arrays.1.spec.ts`,
    tests: [
      {
        name: `basic formatting`,
        code: [`compile_opt idl2`, ``, `a = [1,2,3,4,5]`, `end`],
      },
      {
        name: `line continuation 1`,
        code: [
          `compile_opt idl2`,
          ``,
          `a = [ $`,
          `  1,  $`,
          `  2,$`,
          `  3, $`,
          `  4,   $`,
          `  5 $`,
          `]`,
          `end`,
        ],
      },
      {
        name: `indexing and properties`,
        code: [
          `compile_opt idl2`,
          ``,
          `for xx = 0, numRows-1 do begin`,
          `xRows[xx].Index       = xCobs[xx].Index`,
          `xRows[xx].Name        = xCobs[xx].Name`,
          `xRows[xx].Label       = xCobs[xx].Label`,
          `xRows[xx].SRS_Name    = xCobs[xx].SRS_Name`,
          `xRows[xx].Pos1        = xCobs[xx].Pos1`,
          `xRows[xx].Dims1       = xCobs[xx].Dims1`,
          `xRows[xx].Pos2        = xCobs[xx].Pos2`,
          `xRows[xx].Dims2       = xCobs[xx].Dims2`,
          `xRows[xx].Tm_Pos1     = xCobs[xx].Tm_Pos1`,
          `xRows[xx].Tm_Pos2     = xCobs[xx].Tm_Pos2`,
          `endfor`,
          ``,
          `end`,
        ],
      },
      {
        name: `array indexing spacing`,
        code: [
          `overlaps.LOWER[sIdx] = ptr_new(segs[tSub[0] : tSub[2], tSub[3]])`,
        ],
      },
      {
        name: `brackets for access (via overload)`,
        code: [`meta['band names'] = 'Awesome Label Regions'`],
      },
      {
        name: `array after comma as argument`,
        code: [
          `compile_opt idl2`,
          ``,
          `  inputValidator, hash( $`,
          `'buffer', ['number', 'required'])`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify assignment formatting`,
    fileName: `format.assignment.1.spec.ts`,
    tests: [
      {
        name: `multi-multi line assignment with operators looking correct`,
        code: [
          `compile_opt idl2`,
          ``,
          `a = 1 + $`,
          `  2+ $`,
          `  3   + $`,
          `  4+ $`,
          `  5`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify comment`,
    fileName: `format.comments.1.spec.ts`,
    tests: [
      {
        name: `all flavors of comments`,
        code: [
          `a = 42      ;    comment OK`,
          `    ;; comment bad, now fixed    `,
          `; TODO:   something super crazy    `,
          `  compile_opt idl2`,
          ``,
          `end`,
        ],
      },
      {
        name: 'limit formatting for routine comments',
        code: [
          `;+`,
          `;   My procedure`,
          `;`,
          `;;   Preserve spacing in routine docs`,
          `   ;   fix left alignment though`,
          `;   And trim the right side of the comment blocks       `,
          `; :Args:`,
          `;  var1: in, required, unknown`,
          `;    My favorite thing`,
          `; :Keywords:`,
          `;  kw1: in, optional, type=boolean`,
          `;    Super Cool flag`,
          `;`,
          `;-`,
          `pro mypro, var1, var2, KW1=kw1, KW2=kw2`,
          `  compile_opt idl2`,
          `  if !true then begin`,
          `  print, 'yes'`,
          `  endif`,
          `end`,
        ],
      },
      {
        name: `add placeholder case for variable docs`,
        code: [
          `  compile_opt idl2`,
          ``,
          `  ;+    comment for variable`,
          `  ;  leave indent formatting alone for now`,
          `  ;-   stopped here`,
          `  a = 'something'`,
          `end`,
        ],
      },
      {
        name: ` do not trim string before comment after line continuation`,
        code: [
          `compile_opt idl2`,
          `      ; left align`,
          `   a = 5      ; trim`,
          `MESSAGE, $ ; keep my space!`,
          `'baaaad'`,
          `end`,
          ``,
        ],
      },
    ],
  },
  {
    suiteName: `Executive command formatting`,
    fileName: `format.executive-commands.1.spec.ts`,
    tests: [
      {
        name: `works without main end`,
        code: [
          `compile_opt idl2`,
          ``,
          `.run something`,
          `    .compile myfile.pro    `,
          `  .reset   `,
          ``,
        ],
      },
    ],
  },
  {
    suiteName: `Line separator formatting`,
    fileName: `format.line-separators.1.spec.ts`,
    tests: [
      {
        name: `always remove line separators, never allow them`,
        code: [
          ``,
          ``,
          `compile_opt idl2`,
          ``,
          `if !true then begin & a = b & b = c & c = d & endif`,
          ``,
          `end`,
          ``,
        ],
      },
    ],
  },
  {
    suiteName: `Line separators (&)`,
    fileName: `format.line-separators.2.spec.ts`,
    tests: [
      {
        name: `Another example from docs`,
        code: [
          `compile_opt idl2`,
          ``,
          `if rtol lt ftol then begin ;Done?`,
          `t = y[0] & y[0] = y[ilo] & y[ilo] = t ;Sort so fcn min is 0th elem`,
          `t = p[*,ilo] & p[*,ilo] = p[*,0] & p[*,0] = t`,
          `return, t                 ;params for fcn min`,
          `endif`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify new lines`,
    fileName: `format.new-lines.1.spec.ts`,
    tests: [
      {
        name: `cannot have more than one empty line`,
        code: [
          `pro mypro,   arg1, arg2, arg3,  KW1=kw1,$ ; commment`,
          `KW2 = kw2, KW3 = kw3`,
          `     compile_opt idl2`,
          ``,
          ``,
          ``,
          `return`,
          ``,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Format python code`,
    fileName: `format.python.1.spec.ts`,
    tests: [
      {
        name: `for consistent spacing`,
        code: [
          `compile_opt idl2`,
          ``,
          `>>>from idlpy import *`,
          `>>>      arr = IDL.randomu(None, 10000)`,
          `>>> spec = IDL.fft_powerspectrum(arr, 0.1)`,
          `end`,
          ``,
        ],
      },
    ],
  },
  {
    suiteName: `Verify we do not format when we have bad syntax errors`,
    fileName: `format.respect-errors.1.spec.ts`,
    tests: [
      {
        name: `unclosed tokens are ignored`,
        code: [
          `pro mypro,   arg1, arg2, arg3,  KW1=kw1,$ ; commment`,
          `KW2 = kw2, KW3 = kw3     `,
          `     compile_opt idl2    `,
          `        `,
          `  a = myfunc(`,
          `end     `,
        ],
      },
      {
        name: `unclosed main level is ignored`,
        code: [`     compile_opt idl2    `, `        `, `a = 5     `],
      },
    ],
  },
  {
    suiteName: `Verify we format routines`,
    fileName: `format.routines.1.spec.ts`,
    tests: [
      {
        name: `formats basic routine`,
        code: [
          `pro mypro,   arg1, arg2, arg3,  KW1=kw1,$ ; commment`,
          `KW2 = kw2, KW3 = kw3`,
          `     compile_opt idl2`,
          ``,
          `end`,
        ],
      },
      {
        name: `formats basic method`,
        code: [
          `function myclass::mymethod,   arg1, arg2, arg3,  KW1=kw1,$ ; commment`,
          `KW2 = kw2, KW3 = kw3`,
          `     compile_opt idl2`,
          `return,          1`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify snapping branches to remove leading and trailing spaces`,
    fileName: `format.snap.1.spec.ts`,
    tests: [
      {
        name: `all snap cases`,
        code: [
          `function test, a, $`,
          `  b`,
          ``,
          `  compile_opt idl2`,
          ``,
          `  wait, 0.5`,
          ``,
          `  return, 1`,
          `end`,
          ``,
          `function test::class, a, $`,
          `  b`,
          ``,
          `  compile_opt idl2`,
          ``,
          `  wait, 0.5`,
          ``,
          `  return, 1`,
          `end`,
          ``,
          `pro test::class, a, $`,
          `  b`,
          ``,
          `  compile_opt idl2`,
          ``,
          `  wait, 0.5`,
          ``,
          `end`,
          ``,
          `pro test, a, $`,
          `  b`,
          ``,
          `  compile_opt idl2`,
          ``,
          `  wait, 0.5`,
          ``,
          `  if !true then begin`,
          ``,
          `    print, 5`,
          ``,
          `    print, 6`,
          ` `,
          `  endif`,
          ``,
          `  switch (!true) of`,
          ``,
          `    (42 eq 42): begin`,
          ``,
          `    end`,
          ``,
          `    else: begin`,
          ``,
          `      ; do nothing`,
          ``,
          `    end`,
          ``,
          `  endswitch`,
          ``,
          `end`,
          ``,
          ``,
          `compile_opt idl2`,
          ``,
          `print, 5`,
          ``,
          `wait, 2`,
          ``,
          `test`,
          ``,
          `print, 'Finished'`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify trimming lines`,
    fileName: `format.trimming.1.spec.ts`,
    tests: [
      {
        name: `all lines should be trimmed from the right`,
        code: [
          `pro mypro,   arg1, arg2, arg3,  KW1=kw1,$ ; commment`,
          `KW2 = kw2, KW3 = kw3     `,
          `     compile_opt idl2    `,
          `        `,
          `end     `,
        ],
      },
    ],
  },
  {
    suiteName: `Control statement styling`,
    fileName: `style.control.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  continue`,
          `  break`,
          `  forward_function`,
          `  common block, var1, var2, etc`,
          `  goto, myjump`,
          `  on_ioerror, bad_num`,
          `  myjump:`,
          `end`,
          ``,
          `function myfuncfunc`,
          `  compile_opt idl2`,
          `  return, 1`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `; for loop`,
          `for i=0,100,3 do begin`,
          ``,
          `endfor`,
          ``,
          `; foreach loop`,
          `foreach val, var, key, do begin`,
          ``,
          `endforeach`,
          ``,
          `; while loop`,
          `while !true do begin`,
          ``,
          `endwhile`,
          ``,
          `; repeat loop`,
          `repeat print, !true until !false`,
          ``,
          `; switch statement`,
          `switch !true of`,
          `  else: ; something`,
          `endswitch`,
          ``,
          `; case statement`,
          `case !true of`,
          `  else: ; something`,
          `endcase`,
          ``,
          `; if statement`,
          `if !true then begin`,
          ``,
          `endif else begin`,
          ``,
          `endelse`,
          ``,
          `; structure inheritance`,
          `mystruct = {myname,  INHerits   plot}`,
          ``,
          `; executive command`,
          `.reset`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            control: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  continue`,
          `  break`,
          `  forward_function`,
          `  common block, var1, var2, etc`,
          `  goto, myjump`,
          `  on_ioerror, bad_num`,
          `  myjump:`,
          `end`,
          ``,
          `function myfuncfunc`,
          `  compile_opt idl2`,
          `  return, 1`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `; for loop`,
          `for i=0,100,3 do begin`,
          ``,
          `endfor`,
          ``,
          `; foreach loop`,
          `foreach val, var, key, do begin`,
          ``,
          `endforeach`,
          ``,
          `; while loop`,
          `while !true do begin`,
          ``,
          `endwhile`,
          ``,
          `; repeat loop`,
          `repeat print, !true until !false`,
          ``,
          `; switch statement`,
          `switch !true of`,
          `  else: ; something`,
          `endswitch`,
          ``,
          `; case statement`,
          `case !true of`,
          `  else: ; something`,
          `endcase`,
          ``,
          `; if statement`,
          `if !true then begin`,
          ``,
          `endif else begin`,
          ``,
          `endelse`,
          ``,
          `; structure inheritance`,
          `mystruct = {myname,  INHerits   plot}`,
          ``,
          `; executive command`,
          `.reset`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            control: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  continue`,
          `  break`,
          `  forward_function`,
          `  common block, var1, var2, etc`,
          `  goto, myjump`,
          `  on_ioerror, bad_num`,
          `  myjump:`,
          `end`,
          ``,
          `function myfuncfunc`,
          `  compile_opt idl2`,
          `  return, 1`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `; for loop`,
          `for i=0,100,3 do begin`,
          ``,
          `endfor`,
          ``,
          `; foreach loop`,
          `foreach val, var, key, do begin`,
          ``,
          `endforeach`,
          ``,
          `; while loop`,
          `while !true do begin`,
          ``,
          `endwhile`,
          ``,
          `; repeat loop`,
          `repeat print, !true until !false`,
          ``,
          `; switch statement`,
          `switch !true of`,
          `  else: ; something`,
          `endswitch`,
          ``,
          `; case statement`,
          `case !true of`,
          `  else: ; something`,
          `endcase`,
          ``,
          `; if statement`,
          `if !true then begin`,
          ``,
          `endif else begin`,
          ``,
          `endelse`,
          ``,
          `; structure inheritance`,
          `mystruct = {myname,  INHerits   plot}`,
          ``,
          `; executive command`,
          `.reset`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            control: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Style internal routines`,
    fileName: `style.internal-routines.spec.ts`,
    tests: [
      {
        name: `match`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  Return`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `PRINT`,
          `Openr`,
          ``,
          `p = PLOT()`,
          ``,
          `r = enviraster()`,
          ``,
          `o = idlneturl()`,
          ``,
          `s = IDLFFSHAPE()`,
          ``,
          `!null = STRTOK('something')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `pascal`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  Return`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `PRINT`,
          `Openr`,
          ``,
          `p = PLOT()`,
          ``,
          `r = enviraster()`,
          ``,
          `o = idlneturl()`,
          ``,
          `s = IDLFFSHAPE()`,
          ``,
          `!null = STRTOK('something')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.PASCAL,
          },
        },
      },
      {
        name: `camel`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  Return`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `PRINT`,
          `Openr`,
          ``,
          `p = PLOT()`,
          ``,
          `r = enviraster()`,
          ``,
          `o = idlneturl()`,
          ``,
          `s = IDLFFSHAPE()`,
          ``,
          `!null = STRTOK('something')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.CAMEL,
          },
        },
      },
      {
        name: `upper`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  Return`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `PRINT`,
          `Openr`,
          ``,
          `p = PLOT()`,
          ``,
          `r = enviraster()`,
          ``,
          `o = idlneturl()`,
          ``,
          `s = IDLFFSHAPE()`,
          ``,
          `!null = STRTOK('something')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `lower`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  Return`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `PRINT`,
          `Openr`,
          ``,
          `p = PLOT()`,
          ``,
          `r = enviraster()`,
          ``,
          `o = idlneturl()`,
          ``,
          `s = IDLFFSHAPE()`,
          ``,
          `!null = STRTOK('something')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `none`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          `  Return`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `PRINT`,
          `Openr`,
          ``,
          `p = PLOT()`,
          ``,
          `r = enviraster()`,
          ``,
          `o = idlneturl()`,
          ``,
          `s = IDLFFSHAPE()`,
          ``,
          `!null = STRTOK('something')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Style user routines`,
    fileName: `style.user-routines.spec.ts`,
    tests: [
      {
        name: `match`,
        code: [
          `pro test_things`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function test_THINGS`,
          `  compile_opt idl2`,
          `  return, 42`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `TEST_THINGS`,
          `!null = test_things()`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `pascal`,
        code: [
          `pro test_things`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function test_THINGS`,
          `  compile_opt idl2`,
          `  return, 42`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `TEST_THINGS`,
          `!null = test_things()`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.PASCAL,
          },
        },
      },
      {
        name: `camel`,
        code: [
          `pro test_things`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function test_THINGS`,
          `  compile_opt idl2`,
          `  return, 42`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `TEST_THINGS`,
          `!null = test_things()`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.CAMEL,
          },
        },
      },
      {
        name: `upper`,
        code: [
          `pro test_things`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function test_THINGS`,
          `  compile_opt idl2`,
          `  return, 42`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `TEST_THINGS`,
          `!null = test_things()`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `lower`,
        code: [
          `pro test_things`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function test_THINGS`,
          `  compile_opt idl2`,
          `  return, 42`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `TEST_THINGS`,
          `!null = test_things()`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `none`,
        code: [
          `pro test_things`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function test_THINGS`,
          `  compile_opt idl2`,
          `  return, 42`,
          `end`,
          ``,
          `compile_opt idl2`,
          ``,
          `TEST_THINGS`,
          `!null = test_things()`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routines: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Keyword styling`,
    fileName: `style.keywords.1.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [
          `pro mypro, KW1 = kw1, KEY_word2=kw2`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function myclass::myMethod, KW1 = kw1, KEY_word2=kw2`,
          `  compile_opt idl2`,
          `  return, 1`,
          `end`,
          ``,
          `     compile_opt idl2`,
          ``,
          `a  = myfunc(/kw3, kw1='jargon')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            keywords: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [
          `pro mypro, KW1 = kw1, KEY_word2=kw2`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function myclass::myMethod, KW1 = kw1, KEY_word2=kw2`,
          `  compile_opt idl2`,
          `  return, 1`,
          `end`,
          ``,
          `     compile_opt idl2`,
          ``,
          `a  = myfunc(/kw3, kw1='jargon')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            keywords: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [
          `pro mypro, KW1 = kw1, KEY_word2=kw2`,
          `  compile_opt idl2`,
          `end`,
          ``,
          `function myclass::myMethod, KW1 = kw1, KEY_word2=kw2`,
          `  compile_opt idl2`,
          `  return, 1`,
          `end`,
          ``,
          `     compile_opt idl2`,
          ``,
          `a  = myfunc(/kw3, kw1='jargon')`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            keywords: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Method styling`,
    fileName: `style.methods.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [
          `     compile_opt idl2`,
          ``,
          `a  = myclass  .  mymethod()`,
          `myclass  .  mymethod`,
          `a  = myclass  ->  mymethod()`,
          `myclass  ->  mymethod`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            methods: STYLE_FLAG_LOOKUP.DOT,
          },
        },
      },
      {
        name: `using dated format`,
        code: [
          `     compile_opt idl2`,
          ``,
          `a  = myclass  .  mymethod()`,
          `myclass  .  mymethod`,
          `a  = myclass  ->  mymethod()`,
          `myclass  ->  mymethod`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            methods: STYLE_FLAG_LOOKUP.ARROW,
          },
        },
      },
      {
        name: `using no format`,
        code: [
          `     compile_opt idl2`,
          ``,
          `a  = myclass  .  mymethod()`,
          `myclass  .  mymethod`,
          `a  = myclass  ->  mymethod()`,
          `myclass  ->  mymethod`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            methods: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Method styling`,
    fileName: `style.methods-call.spec.ts`,
    tests: [
      {
        name: `match`,
        code: [
          `function myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `!null = self.myMethod()`,
          ``,
          `return, 1`,
          `end`,
          ``,
          `pro myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `self.myMethod`,
          `end`,
          ``,
          `pro auto_doc_example`,
          `compile_opt idl2`,
          ``,
          `p = IDLgrSurface()`,
          `!null = p.getFullIdentifier()`,
          `p.SETVERTEXATTRIBUTEDATA`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routineMethods: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `pascal`,
        code: [
          `function myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `!null = self.myMethod()`,
          ``,
          `return, 1`,
          `end`,
          ``,
          `pro myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `self.myMethod`,
          `end`,
          ``,
          `pro auto_doc_example`,
          `compile_opt idl2`,
          ``,
          `p = IDLgrSurface()`,
          `!null = p.getFullIdentifier()`,
          `p.SETVERTEXATTRIBUTEDATA`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routineMethods: STYLE_FLAG_LOOKUP.PASCAL,
          },
        },
      },
      {
        name: `camel`,
        code: [
          `function myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `!null = self.myMethod()`,
          ``,
          `return, 1`,
          `end`,
          ``,
          `pro myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `self.myMethod`,
          `end`,
          ``,
          `pro auto_doc_example`,
          `compile_opt idl2`,
          ``,
          `p = IDLgrSurface()`,
          `!null = p.getFullIdentifier()`,
          `p.SETVERTEXATTRIBUTEDATA`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routineMethods: STYLE_FLAG_LOOKUP.CAMEL,
          },
        },
      },
      {
        name: `upper`,
        code: [
          `function myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `!null = self.myMethod()`,
          ``,
          `return, 1`,
          `end`,
          ``,
          `pro myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `self.myMethod`,
          `end`,
          ``,
          `pro auto_doc_example`,
          `compile_opt idl2`,
          ``,
          `p = IDLgrSurface()`,
          `!null = p.getFullIdentifier()`,
          `p.SETVERTEXATTRIBUTEDATA`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routineMethods: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `lower`,
        code: [
          `function myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `!null = self.myMethod()`,
          ``,
          `return, 1`,
          `end`,
          ``,
          `pro myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `self.myMethod`,
          `end`,
          ``,
          `pro auto_doc_example`,
          `compile_opt idl2`,
          ``,
          `p = IDLgrSurface()`,
          `!null = p.getFullIdentifier()`,
          `p.SETVERTEXATTRIBUTEDATA`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routineMethods: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `none`,
        code: [
          `function myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `!null = self.myMethod()`,
          ``,
          `return, 1`,
          `end`,
          ``,
          `pro myclass::MYMETHOD`,
          `compile_opt idl2`,
          ``,
          `self.myMethod`,
          `end`,
          ``,
          `pro auto_doc_example`,
          `compile_opt idl2`,
          ``,
          `p = IDLgrSurface()`,
          `!null = p.getFullIdentifier()`,
          `p.SETVERTEXATTRIBUTEDATA`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            routineMethods: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Prompt styling`,
    fileName: `style.prompts.spec.ts`,
    tests: [
      {
        name: `format ENVI and IDL`,
        code: [
          ``,
          ``,
          `compile_opt idl2`,
          ``,
          `idl>    print, 17`,
          ``,
          `  envi>a = 5 + 6`,
          ``,
          `end`,
          ``,
        ],
      },
    ],
  },
  {
    suiteName: `Number styling`,
    fileName: `style.numbers.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = 45Ll`,
          ``,
          `a = "101010"bll`,
          ``,
          `a = "777"oS`,
          ``,
          `a = "fFf"xlL`,
          ``,
          `a = '101010'bll`,
          ``,
          `a = '777'oS`,
          ``,
          `a = 'fFf'xlL`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            numbers: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = 45Ll`,
          ``,
          `a = "101010"bll`,
          ``,
          `a = "777"oS`,
          ``,
          `a = "fFf"xlL`,
          ``,
          `a = '101010'bll`,
          ``,
          `a = '777'oS`,
          ``,
          `a = 'fFf'xlL`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            numbers: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = 45Ll`,
          ``,
          `a = "101010"bll`,
          ``,
          `a = "777"oS`,
          ``,
          `a = "fFf"xlL`,
          ``,
          `a = '101010'bll`,
          ``,
          `a = '777'oS`,
          ``,
          `a = 'fFf'xlL`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            numbers: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Hex number styling`,
    fileName: `style.hex.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0XaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            hex: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0XaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            hex: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0XaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            hex: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Octal number styling`,
    fileName: `style.octal.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0OaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            octal: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0OaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            octal: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0OaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            octal: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Binary number styling`,
    fileName: `style.binary.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0BaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            binary: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0BaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            binary: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [`compile_opt idl2, hidden`, ``, `a = 0BaEf`, ``, `end`],
        config: {
          formatter: 'fiddle',
          style: {
            binary: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Property styling`,
    fileName: `style.properties.spec.ts`,
    tests: [
      {
        name: `match`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = myvar.myPROP`,
          `b = {SomeThing:'cool'}`,
          `!null = b.SomeThing`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            properties: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `pascal`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = myvar.myPROP`,
          `b = {SomeThing:'cool'}`,
          `!null = b.SomeThing`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            properties: STYLE_FLAG_LOOKUP.PASCAL,
          },
        },
      },
      {
        name: `camel`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = myvar.myPROP`,
          `b = {SomeThing:'cool'}`,
          `!null = b.SomeThing`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            properties: STYLE_FLAG_LOOKUP.CAMEL,
          },
        },
      },
      {
        name: `lower`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = myvar.myPROP`,
          `b = {SomeThing:'cool'}`,
          `!null = b.SomeThing`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            properties: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `upper`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = myvar.myPROP`,
          `b = {SomeThing:'cool'}`,
          `!null = b.SomeThing`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            properties: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `none`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = myvar.myPROP`,
          `b = {SomeThing:'cool'}`,
          `!null = b.SomeThing`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            properties: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify variable styling`,
    fileName: `style.variables.1.spec.ts`,
    tests: [
      {
        name: `in procedures with modern formatting`,
        code: [
          `pro test_things, a, someTHING, c, KW1 = kw11`,
          `  compile_opt idl2`,
          `  A = something + C + keyword_set(KW11)`,
          `  taSK = ENVITask('Something')`,
          `  TASK = !null`,
          `  !null = enVi.openRaster()`,
          `  !null = enviTask.parameter()`,
          `end`,
        ],
        config: {
          style: {
            localVariables: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `in procedures with no formatting`,
        code: [
          `pro test_things, a, someTHING, c, KW1 = kw11`,
          `  compile_opt idl2`,
          `  A = something + C + keyword_set(KW11)`,
          `  taSK = ENVITask('Something')`,
          `  TASK = !null`,
          `  !null = enVi.openRaster()`,
          `  !null = enviTask.parameter()`,
          `end`,
        ],
        config: {
          style: {
            localVariables: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
      {
        name: `in functions with modern formatting`,
        code: [
          `function test_things, a, someTHING, c, KW1 = kw11`,
          `  compile_opt idl2`,
          `  A = something + C + keyword_set(KW11)`,
          `  taSK = ENVITask('Something')`,
          `  TASK = !null`,
          `  !null = enVi.openRaster()`,
          `  !null = enviTask.parameter()`,
          `  return, task`,
          `end`,
        ],
        config: {
          style: {
            localVariables: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `in functions with no formatting`,
        code: [
          `function test_things, a, someTHING, c, KW1 = kw11`,
          `  compile_opt idl2`,
          `  A = something + C + keyword_set(KW11)`,
          `  taSK = ENVITask('Something')`,
          `  TASK = !null`,
          `  !null = enVi.openRaster()`,
          `  !null = enviTask.parameter()`,
          `  return, task`,
          `end`,
        ],
        config: {
          style: {
            localVariables: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
      {
        name: `in main level with modern formatting`,
        code: [
          `compile_opt idl2`,
          `A = something + C + keyword_set(KW11)`,
          `taSK = ENVITask('Something')`,
          `TASK = !null`,
          `!null = enVi.openRaster()`,
          `!null = enviTask.parameter()`,
          `end`,
        ],
        config: {
          style: {
            localVariables: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `in main level with no formatting`,
        code: [
          `compile_opt idl2`,
          `A = something + C + keyword_set(KW11)`,
          `taSK = ENVITask('Something')`,
          `TASK = !null`,
          `!null = enVi.openRaster()`,
          `!null = enviTask.parameter()`,
          `end`,
        ],
        config: {
          style: {
            localVariables: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `System variable styling`,
    fileName: `style.system-variables.spec.ts`,
    tests: [
      {
        name: `using modern format`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = !SYSTEM_variable`,
          ``,
          `b = {!CPu, hw_vector: 0l, vector_enable: 0l, hw_ncpu: 0l,$`,
          `  tpool_nthreads: 0l, tpool_min_elts: 0l, tpool_max_elts: 0l}`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            systemVariables: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `using dated format`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = !SYSTEM_variable`,
          ``,
          `b = {!CPu, hw_vector: 0l, vector_enable: 0l, hw_ncpu: 0l,$`,
          `  tpool_nthreads: 0l, tpool_min_elts: 0l, tpool_max_elts: 0l}`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            systemVariables: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `using no format`,
        code: [
          `compile_opt idl2, hidden`,
          ``,
          `a = !SYSTEM_variable`,
          ``,
          `b = {!CPu, hw_vector: 0l, vector_enable: 0l, hw_ncpu: 0l,$`,
          `  tpool_nthreads: 0l, tpool_min_elts: 0l, tpool_max_elts: 0l}`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            systemVariables: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify adjusting indent adjusts spacing`,
    fileName: `format.indent.1.spec.ts`,
    tests: [
      {
        name: `set indent to 3`,
        code: [
          `pro mypro`,
          `  compile_opt idl2`,
          ``,
          `  ; double quote`,
          `  a = "something"`,
          ``,
          `  ; double quote with single quote`,
          `  a = "'"`,
          ``,
          `  ; escaped double quote`,
          `  a = "escaped""formatting"`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          tabWidth: 3,
          style: {
            quotes: STYLE_FLAG_LOOKUP.SINGLE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify keywords`,
    fileName: `style.keywords.1.spec.ts`,
    tests: [
      {
        name: `basic formatting`,
        code: [`compile_opt idl2`, ``, `a = myfunc(KW1=kw2, /KW3)`, `end`],
      },
      {
        name: `with line continuation`,
        code: [
          `compile_opt idl2`,
          ``,
          `Graphic, name, arg1, arg2, $`,
          `/AUTO_CROSSHAIR, COLOR=color, LINESTYLE=linestyle, $`,
          `SYMBOL=SYMBOL, THICK=thick, LAYOUT=layout, TEST=test, _EXTRA=ex, $`,
          `GRAPHIC=graphic`,
          ``,
          `end`,
        ],
      },
      {
        name: `solo keyword`,
        code: [`compile_opt idl2`, ``, `a = myfunc(KW1=kw2)`, `end`],
      },
      {
        name: `solo binary keyword`,
        code: [`compile_opt idl2`, ``, `a = myfunc(/KW2)`, `end`],
      },
      {
        name: `preserve other children after keyword when we format`,
        code: [
          `compile_opt idl2`,
          `tvcrs,x,y,/dev $  ;Restore cursor`,
          `          kw=2`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify code snippets from the lib folder`,
    fileName: `lib-examples.1.spec.ts`,
    tests: [
      {
        name: `cw_ogc_wcs_cap.pro 1`,
        code: [
          `compile_opt idl2`,
          `subsel = make_array(2, numRows, /byte)  ; an array to hold the unique values`,
          `subsel[0,0] = sel[*,1]`,
          `lastRow = sel[1,0]`,
          `ri = 1`,
          ``,
          `;filter out all the rows that repeat`,
          `for i=1, cnt-1 do begin`,
          `   if (lastRow ne sel[1,i]) then begin`,
          `      sel[0,i] = 1`,
          `      subsel[*,ri] = sel[*,i]`,
          `      lastRow = sel[1,i]`,
          `      ri++`,
          `    endif`,
          `endfor`,
          ``,
          `end`,
        ],
      },
      {
        name: `cw_ogc_wcs_cap.pro 2`,
        code: [
          ``,
          `if ((*pstate).mouseState eq 1) then begin`,
          ``,
          `    if (totCOBs gt rows) then begin`,
          `       if ((*pstate).scrollUp eq 0) then begin  ; scroll down`,
          `          if ((*pstate).cobIndex lt totCOBs) then begin`,
          ``,
          ``,
          `             (*pstate).cobIndex = (*pstate).cobIndex + (*pstate).pageScrlInc`,
          ``,
          `             idx   = (*pstate).cobIndex`,
          `             skip  = idx-rows`,
          `             if (skip gt (totCOBs - rows)) then begin`,
          `                skip = totCOBs - rows`,
          `                ;(*pstate).cobIndex = totCOBs-rows`,
          `                (*pstate).cobIndex = totCOBs`,
          `             endif`,
          ``,
          `             res   = (*pstate).owcs->GetCoverageOfferingBriefs(index=skip, number=rows)`,
          `             cw_ogc_wcs_cap_display_cap_table, ev, res`,
          ``,
          `           endif`,
          `       endif else begin  ; scroll up`,
          `          if ((*pstate).cobIndex gt rows) then begin`,
          ``,
          ``,
          `             (*pstate).cobIndex =  (*pstate).cobIndex - (*pstate).pageScrlInc`,
          ``,
          `             idx   = (*pstate).cobIndex`,
          `             skip  = idx-rows`,
          ``,
          `             if (skip lt 0) then begin`,
          `                skip = 0`,
          `                (*pstate).cobIndex = rows`,
          `             endif`,
          ``,
          `             res   = (*pstate).owcs->GetCoverageOfferingBriefs(index=skip, number=rows)`,
          `             cw_ogc_wcs_cap_display_cap_table, ev, res`,
          ``,
          `           endif`,
          `       endelse`,
          `    endif`,
          `endif`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Lib examples 2`,
    fileName: `lib-examples.2.spec.ts`,
    tests: [
      {
        name: `dist.pro`,
        code: [
          `function dist,n,m  ;Return a rectangular array in which each pixel = euclidian`,
          `               ;distance from the origin.`,
          `compile_opt idl2`,
          ``,
          `on_error,2              ;Return to caller if an error occurs`,
          ``,
          `n1 = n[0]`,
          `m1 = (n_elements(m) le 0) ? n1 : m[0]`,
          `x=findgen(n1)          ;Make a row`,
          `x = (x < (n1-x)) ^ 2   ;column squares`,
          ``,
          `a = FLTARR(n1,m1,/NOZERO)      ;Make array`,
          ``,
          `for i=0L, m1/2 do begin        ;Row loop`,
          `       y = sqrt(x + i^2.) ;Euclidian distance`,
          `       a[0,i] = y      ;Insert the row`,
          `       if i ne 0 then a[0, m1-i] = y ;Symmetrical`,
          `endfor`,
          `return,a`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify we style case`,
    fileName: `style.logic-case.1.spec.ts`,
    tests: [
      {
        name: `formats messy case`,
        code: [
          `CASE x OF`,
          `   ; something cool`,
          `1 $`,
          `  : $`,
          `   PRINT, 'one' + func()`,
          `  2 $`,
          `  : $`,
          `  PRINT, 'one' + func()`,
          `     ELSE: BEGIN`,
          `   dat = {myStruct}`,
          `   PRINT, 'Please enter a value between 1 and 4'`,
          `   END`,
          `ENDCASE`,
          `end`,
        ],
      },
      {
        name: `formats nested case`,
        code: [
          `CASE x OF`,
          `1: PRINT, 'one'`,
          `ELSE: BEGIN`,
          ` CASE x OF`,
          `      2: PRINT, 'two'`,
          `    ELSE: BEGIN`,
          `  END`,
          `     ENDCASE`,
          `END`,
          `ENDCASE`,
          `end`,
        ],
      },
      {
        name: 'Properly format indents for case without line continuation',
        code: [
          `compile_opt idl2`,
          `  ; determine how to proceed`,
          `  case !true of`,
          `    ; only have positive values`,
          `    negative eq !null: begin`,
          `        ranges[*, i] = [0, positive]`,
          `      end`,
          ``,
          `    ; only have negative values`,
          `    positive eq !null: begin`,
          `        ranges[*, i] = [-negative, 0]`,
          `      end`,
          ``,
          `    ; have positive and negative values`,
          `    else: begin`,
          `      ; get our bounds`,
          `      maxVal = negative > positive`,
          ``,
          `      ; populate range`,
          `      ranges[*, i] = [-maxVal, maxVal]`,
          `    end`,
          `  endcase`,
          `end`,
        ],
      },
      {
        name: `removes spaces in logical default`,
        code: [
          `compile_opt idl2`,
          `case N_PARAMS() of`,
          `else    : ; remove my space to the left after "else"`,
          `endcase`,
          `end`,
        ],
      },
      {
        name: `properly formats this case/switch style`,
        code: [
          `compile_opt idl2`,
          ``,
          `; Just determine what to do and register.`,
          `case 1 of`,
          ``,
          `  keyword_set(visualization): $`,
          `    oSystem->RegisterVisualization, strName, strClassName, _EXTRA = _extra`,
          ``,
          `keyword_set(annotation): $`,
          `  oSystem->RegisterAnnotation, strName, strClassName, _EXTRA = _extra`,
          ``,
          `keyword_set(user_interface): $`,
          `oSystem->RegisterUserInterface, strName, strClassName, _EXTRA = _extra`,
          ``,
          `keyword_set(ui_panel): $`,
          `oSystem->RegisterUIPanel, strName, strClassName, _EXTRA = _extra`,
          ``,
          `keyword_set(ui_service): $`,
          `oSystem->RegisterUIService, strName, strClassName, _EXTRA = _extra`,
          ``,
          `keyword_set(file_reader): $`,
          `oSystem->RegisterFileReader, strName, strClassName, _EXTRA = _extra`,
          ``,
          `keyword_set(file_writer): $`,
          `oSystem->RegisterFileWriter, strName, strClassName, _EXTRA = _extra`,
          ``,
          `else: $`,
          `oSystem->RegisterTool, strName, strClassName, _EXTRA = _extra`,
          ``,
          `endcase`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify we style if-then`,
    fileName: `style.logic-if-then.1.spec.ts`,
    tests: [
      {
        name: `complex scenarios for if-then-else`,
        code: [
          `  COMPILE_OPT idl2`,
          ``,
          `  IF (n_elements(useDicomexIn) EQ 1) THEN $`,
          `    useDicomex = keyword_set(useDicomexIn) $`,
          `  ELSE $`,
          `    useDicomex = 1`,
          ``,
          `  if !true then print, 'true' else print, 'false'`,
          ``,
          `  IF (n_elements(useDicomexIn) EQ 1) $`,
          `THEN $`,
          `  useDicomex = keyword_set(useDicomexIn) $`,
          `   ELSE $`,
          `  useDicomex = 1`,
          ``,
          `  if !true then begin`,
          `print, 'no'`,
          `  endif else begin`,
          `        b = 42`,
          `  endelse`,
          ``,
          `end`,
        ],
      },
      {
        name: `keep on indenting with line continuations`,
        code: [
          `compile_opt idl2`,
          `; when in paren, not as pretty`,
          `if (!true $`,
          ` ) then $`,
          `imageFFT = FFT(image, -1)`,
          ``,
          `;;outside of paren, looks much nicer as long as enclosed`,
          `if (!true)$`,
          ` then $`,
          `imageFFT = FFT(image, -1)`,
          ``,
          `a = 5`,
          `end`,
        ],
      },
      {
        name: `complex indentation for if statement`,
        code: [
          `compile_opt idl2`,
          `if ((imageSz.N_DIMENSIONS ne 2) || $`,
          `((imageSz.TYPE ne 6) && (imageSz.TYPE ne 9)) || $`,
          `  MAX(imageSz.DIMENSIONS[0 : 1] ne imageDims[0] * 2)) then begin`,
          `    ; Double the image size and pad with zeros`,
          `    bigImage = dblarr(imageDims[0] * 2, imageDims[1] * 2)`,
          `    bigImage[0 : imageDims[0] - 1, 0 : imageDims[1] - 1] = image`,
          `    imageFFT = FFT(bigImage, -1)`,
          `    imageNElts = N_ELEMENTS(bigImage)`,
          `  endif`,
          `end`,
        ],
      },
      {
        name: `very complex if statement for regression test`,
        code: [
          `compile_opt idl2`,
          ``,
          `  ;; Check to see if texture map was passed in as 3 or 4 separate 2D`,
          `  ;; arrays.  textureRed, textureGreen, and textureBlue must all`,
          `  ;; be 2D arrays of the same size and type and textureImage must`,
          `  ;; not be set.`,
          `  IF keyword_set(textureRed) && keyword_set(textureGreen) && $`,
          `    keyword_set(textureBlue) && ~keyword_set(textureImage) && $`,
          `    (size(reform(textureRed),/n_dimensions) EQ 2) && $`,
          `    (size(reform(textureGreen),/n_dimensions) EQ 2) && $`,
          `    (size(reform(textureBlue),/n_dimensions) EQ 2) && $`,
          `    ( ((textmap_x=(size(reform(textureRed),/dimensions))[0])) EQ $`,
          `      (size(reform(textureGreen),/dimensions))[0] ) && $`,
          `    ( textmap_x EQ (size(reform(textureBlue),/dimensions))[0] ) && $`,
          `    ( ((textmap_y=(size(reform(textureRed),/dimensions))[1])) EQ $`,
          `      (size(reform(textureGreen),/dimensions))[1] ) && $`,
          `    ( textmap_y EQ (size(reform(textureBlue),/dimensions))[1] ) && $`,
          `    ( ((textmap_type=(size(reform(textureRed),/type))[0])) EQ $`,
          `      (size(reform(textureGreen),/type))[0] ) && $`,
          `    ( textmap_type EQ (size(reform(textureBlue),/type))[0] ) && $`,
          `    ( where(textmap_type EQ [0l,6,7,8,9,10,11]) EQ -1 ) THEN BEGIN`,
          `    ;; textureAlpha, if set, must match TEXTURE_* in size and type`,
          `    IF keyword_set(textureAlpha) && $`,
          `      (size(reform(textureAlpha),/n_dimensions) EQ 2) && $`,
          `      ( textmap_x EQ (size(reform(textureAlpha),/dimensions))[0]) && $`,
          `      ( textmap_y EQ (size(reform(textureAlpha),/dimensions))[1]) && $`,
          `      ( textmap_type EQ (size(reform(textureAlpha),/type))[0]) $`,
          `      THEN BEGIN`,
          `      textData = make_array(4,textmap_x,textmap_y,type=textmap_type)`,
          `      textData[0,*,*] = textureRed`,
          `      textData[1,*,*] = textureGreen`,
          `      textData[2,*,*] = textureBlue`,
          `      textData[3,*,*] = textureAlpha`,
          `    ENDIF ELSE BEGIN`,
          `      textData = make_array(3,textmap_x,textmap_y,type=textmap_type)`,
          `      textData[0,*,*] = textureRed`,
          `      textData[1,*,*] = textureGreen`,
          `      textData[2,*,*] = textureBlue`,
          `    ENDELSE`,
          `    oTextMap = obj_new('idlitDataIDLArray3d', textData, $`,
          `                       NAME='TEXTURE')`,
          `    oParmSet->add, oTextMap, PARAMETER_NAME= "TEXTURE"`,
          `  ENDIF`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify we style switch`,
    fileName: `style.logic-switch.1.spec.ts`,
    tests: [
      {
        name: `formats messy switch`,
        code: [
          `SWITCH x OF`,
          `   ; something cool`,
          `1 $`,
          `  : $`,
          `   PRINT, 'one' + func()`,
          `  2 $`,
          `  : $`,
          `  PRINT, 'one' + func()`,
          `     ELSE: BEGIN`,
          `   dat = {myStruct}`,
          `   PRINT, 'Please enter a value between 1 and 4'`,
          `   END`,
          `ENDCASE`,
          `end`,
        ],
      },
      {
        name: `formats nested switch`,
        code: [
          `SWITCH x OF`,
          `1: PRINT, 'one'`,
          `ELSE: BEGIN`,
          ` switch x OF`,
          `      2: PRINT, 'two'`,
          `    ELSE: BEGIN`,
          `  END`,
          `     ENDCASE`,
          `END`,
          `ENDCASE`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify we style ternary operators well`,
    fileName: `style.logic-ternary.1.spec.ts`,
    tests: [
      {
        name: `simple case with spacing`,
        code: [`nPrint = (nTiles lt 100) ? 1:ceil(nTiles / 100.0)`],
      },
      {
        name: `Case to preserve spacing before else`,
        code: [`oWorld = OBJ_VALID(oLayer) ? oLayer->GetWorld(): OBJ_NEW()`],
      },
    ],
  },
  {
    suiteName: `Verify style for methods`,
    fileName: `style.methods.1.spec.ts`,
    tests: [
      {
        name: `remove excess spaces`,
        code: [
          `     compile_opt idl2`,
          ``,
          `a  = myclass  .  mymethod()`,
          `myclass  .  mymethod`,
          `a  = myclass  ->  mymethod()`,
          `myclass  ->  mymethod`,
          ``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify operators`,
    fileName: `style.operators.1.spec.ts`,
    tests: [
      {
        name: `pointers`,
        code: [
          `compile_opt idl2`,
          ``,
          `; complex pointers`,
          `(*pstate).coDesCovIdArr[(*pstate).coDesCovIdArrIdx++] = ogc_wcs_descov(ev.top, (*pstate).owcs, covNames, '')`,
          ``,
          `end`,
        ],
      },
      {
        name: `pointers`,
        code: [`compile_opt idl2`, ``, `*ptr = 42`, `end`],
      },
      {
        name: `operators that should not have spaces`,
        code: [
          `compile_opt idl2`,
          ``,
          `a++`,
          `b--`,
          `++c`,
          `--d`,
          `a += 6`,
          `y -= 42`,
          `m = --6`,
          `n = ++4`,
          `end`,
        ],
      },
      {
        name: `handle tilde`,
        code: [
          `if ~keyword_set(difference_raster_uri) then difference_raster_uri = e.GetTemporaryFilename()`,
        ],
      },
      {
        name: `pointer dereference and multiplication`,
        code: [
          `compile_opt idl2`,
          `a = 5*10`,
          `(*ptr).prop = 5`,
          `b = *ptr`,
          `segsUpper.Add, * overlaps.LOWER[mapXY[0], mapXY[1] - 1], /EXTRACT`,
          `end`,
        ],
      },
      {
        name: `remove spaces before operators where we do not need then`,
        code: [
          `  compile_opt idl2`,
          ``,
          `  a = -  1`,
          `  mypro, -  1`,
          ``,
          `  ; create a struture to store information about our tile overlaps`,
          `  overlaps = { $`,
          `    IDX_X: - 0l $`,
          `    }`,
          `deltas = ranges[1, *]-ranges[0, *]`,
          `idxMin = [0 : - 2]`,
          `end`,
        ],
      },
      {
        name: `preserve spacing here`,
        code: [`a = ['Anomaly Detection: ' + task.MEAN_CALCULATION_METHOD]`],
      },
      {
        name: `preserve spacing here too`,
        code: [`cs = !dpi *[0d : num_period - 1]`],
      },
      {
        name: `operators by paren get properly ignored for trimming`,
        code: [
          `compile_opt idl2`,
          `  if (and filtMask and igMask) then filters = 'Image Files'`,
          `  if (eq filtMask and igMask) then filters = 'Image Files'`,
          `  if (ge filtMask and igMask) then filters = 'Image Files'`,
          `  if (gt filtMask and igMask) then filters = 'Image Files'`,
          `  if (le filtMask and igMask) then filters = 'Image Files'`,
          `  if (lt filtMask and igMask) then filters = 'Image Files'`,
          `  if (mod filtMask and igMask) then filters = 'Image Files'`,
          `  if (ne filtMask and igMask) then filters = 'Image Files'`,
          `  if (not filtMask and igMask) then filters = 'Image Files'`,
          `  if (or filtMask and igMask) then filters = 'Image Files'`,
          `  if (xor filtMask and igMask) then filters = 'Image Files'`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify double quote styling`,
    fileName: `style.quotes-double.1.spec.ts`,
    tests: [
      {
        name: `convert double to single quote`,
        code: [
          `  compile_opt idl2`,
          ``,
          `  ; double quote`,
          `  a = "something"`,
          ``,
          `  ; double quote with single quote`,
          `  a = "'"`,
          ``,
          `  ; escaped double quote`,
          `  a = "escaped""formatting"`,
          ``,
          `  ; number strings`,
          `  a = "010101"b`,
          ``,
          `  ; special escaped double quote`,
          `  a = """string"""`,
          ``,
          `  ; special escaped single quote`,
          `  a = '''string'''`,
          ``,
          `  ; special double quote with singles`,
          `  a = "'string'"`,
          ``,
          `  ; special single quote with doubles`,
          `  a = '"string"'`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.SINGLE,
          },
        },
      },
      {
        name: `keep formatting when double quotes is preference`,
        code: [
          `  compile_opt idl2`,
          ``,
          `  ; double quote`,
          `  a = "something"`,
          ``,
          `  ; double quote with single quote`,
          `  a = '"'`,
          ``,
          `  ; escaped double quote`,
          `  a = "escaped""formatting"`,
          ``,
          `  ; number strings`,
          `  a = "010101"b`,
          ``,
          `  ; special escaped double quote`,
          `  a = """string"""`,
          ``,
          `  ; special escaped single quote`,
          `  a = '''string'''`,
          ``,
          `  ; special double quote with singles`,
          `  a = "'string'"`,
          ``,
          `  ; special single quote with doubles`,
          `  a = '"string"'`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.DOUBLE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify no formatting of quotes`,
    fileName: `style.quotes-none.1.spec.ts`,
    tests: [
      {
        name: `preserve all quotes`,
        code: [
          `compile_opt idl2`,
          ``,
          `message, 'Each dimension must be greater than 1."'`,
          ``,
          `a = "5"`,
          ``,
          `a = 'fourty two'`,
          ``,
          `; for chris and doug`,
          `a = '1'`,
          ``,
          ``,
          `  ; number strings`,
          `  a = "010101"b`,
          ``,
          `  ; special escaped double quote`,
          `  a = """string"""`,
          ``,
          `  ; special escaped single quote`,
          `  a = '''string'''`,
          ``,
          `  ; special double quote with singles`,
          `  a = "'string'"`,
          ``,
          `  ; special single quote with doubles`,
          `  a = '"string"'`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify double quote parsing`,
    fileName: `style.quotes-nested.1.spec.ts`,
    tests: [
      {
        name: `preserve nested double quote when we use single`,
        code: [
          `compile_opt idl2`,
          ``,
          `message, 'Each dimension must be greater than 1."'`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.SINGLE,
          },
        },
      },
      {
        name: `preserve nested single quote when we use double`,
        code: [
          `compile_opt idl2`,
          ``,
          `message, "Each dimension must be greater than 1.'"`,
          ``,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.DOUBLE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify single quote parsing`,
    fileName: `style.quotes-single.1.spec.ts`,
    tests: [
      {
        name: `convert single to double quote`,
        code: [
          `  compile_opt idl2`,
          ``,
          `  ; single quote`,
          `  a = 'something'`,
          ``,
          `  ; double quote with single quote`,
          `  a = '"'`,
          ``,
          `  ; escaped single quote`,
          `  a = 'escaped''formatting'`,
          ``,
          `  ; number strings`,
          `  a = '010101'b`,
          `  a = "010101"b`,
          ``,
          `  ; special escaped double quote`,
          `  a = """string"""`,
          ``,
          `  ; special escaped single quote`,
          `  a = '''string'''`,
          ``,
          `  ; special double quote with singles`,
          `  a = "'string'"`,
          ``,
          `  ; special single quote with doubles`,
          `  a = '"string"'`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.DOUBLE,
          },
        },
      },
      {
        name: `keep formatting when single quotes is preference`,
        code: [
          `  compile_opt idl2`,
          ``,
          `  ; single quote`,
          `  a = 'something'`,
          ``,
          `  ; double quote with single quote`,
          `  a = "'"`,
          ``,
          `  ; escaped single quote`,
          `  a = 'escaped''formatting'`,
          ``,
          `  ; number strings`,
          `  a = '010101'b`,
          `  a = "010101"b`,
          ``,
          `  ; special escaped double quote`,
          `  a = """string"""`,
          ``,
          `  ; special escaped single quote`,
          `  a = '''string'''`,
          ``,
          `  ; special double quote with singles`,
          `  a = "'string'"`,
          ``,
          `  ; special single quote with doubles`,
          `  a = '"string"'`,
          `end`,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            quotes: STYLE_FLAG_LOOKUP.SINGLE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify string literal styling`,
    fileName: `style.string-literal.1.spec.ts`,
    tests: [
      {
        name: `simple`,
        code: [
          `     compile_opt idl2    `,
          `a = \`my string with\${expression}\``,
          `b = \`something \${5 + 6*12}\``,
          ` c = \`   preserve as string\``,
          `;preserve interior spacing`,
          `a = \`with   \${expression()}  else\``,
          `        `,
          `end     `,
        ],
      },
      {
        name: `multi-line`,
        code: [
          `compile_opt idl2`,
          `; thing`,
          `a = \` first`,
          `    second`,
          `  third`,
          `\``,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify structures`,
    fileName: `style.structures.1.spec.ts`,
    tests: [
      {
        name: `simple`,
        code: [
          `     compile_opt idl2    `,
          `fourty2   =  {  mystruct   }`,
          `        `,
          `end     `,
        ],
      },
      {
        name: `structure`,
        code: [
          `pro folderwatch__define`,
          `  compile_opt idl2, hidden`,
          `  on_error, 2`,
          ``,
          `  void = { $`,
          `    FOLDERWATCH, $`,
          `    inherits idl_object, $`,
          `    _folder: '', $`,
          `    _callback: '', $`,
          `    _userdata: ptr_new(), $`,
          `    _added: 0b, $`,
          `    _modified: 0b, $`,
          `    _removed: 0b, $`,
          `    _frequency: 0d, $`,
          `    _timerid: 0l, $`,
          `    _fileinfo: ptr_new(), $`,
          `    _recursive: 0b, $`,
          `    _active: 0b, $`,
          `    _incallback: 0b $`,
          `  }`,
          ``,
          `end`,
        ],
      },
      {
        name: `structure with arrays`,
        code: [
          `pro folderwatch__define`,
          `  compile_opt idl2, hidden`,
          `  on_error, 2`,
          ``,
          `  void = { $`,
          `      IDX_XY:   [0l, 0l], $`,
          `   RIGHT_MEANS: ptrarr(mapDims) $`,
          `  }`,
          ``,
          `end`,
        ],
      },
      {
        name: `structure with line continuations regression`,
        code: [
          `  compile_opt idl2, hidden`,
          `!null = {IDLNotebook, $`,
          `  _foo: 5}`,
          ``,
          `  !null = $`,
          `    {IDLNotebook, $`,
          `      _foo: 5}`,
          ``,
          `  !null = { $`,
          `    _foo: 5}`,
          ``,
          `  !null = $`,
          `  { $`,
          ` _foo: 5}`,
          `end`,
        ],
      },
    ],
  },
  {
    suiteName: `Verify structure names`,
    fileName: `style.structure-names.1.spec.ts`,
    tests: [
      {
        name: `match`,
        code: [
          `     compile_opt idl2    `,
          `!null   =  {  IDLnetURl   }`,
          `!null   =  {  enviRaster   }`,
          `!null   =  {  idlNotebook   }`,
          `!null   =  {  !map   } ; special case, handled by sys var`,
          `end     `,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            structureNames: STYLE_FLAG_LOOKUP.MATCH,
          },
        },
      },
      {
        name: `pascal`,
        code: [
          `     compile_opt idl2    `,
          `!null   =  {  IDLnetURl   }`,
          `!null   =  {  enviRaster   }`,
          `!null   =  {  idlNotebook   }`,
          `!null   =  {  !map   } ; special case, handled by sys var`,
          `end     `,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            structureNames: STYLE_FLAG_LOOKUP.PASCAL,
          },
        },
      },
      {
        name: `camel`,
        code: [
          `     compile_opt idl2    `,
          `!null   =  {  IDLnetURl   }`,
          `!null   =  {  enviRaster   }`,
          `!null   =  {  idlNotebook   }`,
          `!null   =  {  !map   } ; special case, handled by sys var`,
          `end     `,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            structureNames: STYLE_FLAG_LOOKUP.CAMEL,
          },
        },
      },
      {
        name: `upper`,
        code: [
          `     compile_opt idl2    `,
          `!null   =  {  IDLnetURl   }`,
          `!null   =  {  enviRaster   }`,
          `!null   =  {  idlNotebook   }`,
          `!null   =  {  !map   } ; special case, handled by sys var`,
          `end     `,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            structureNames: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: `lower`,
        code: [
          `     compile_opt idl2    `,
          `!null   =  {  IDLnetURl   }`,
          `!null   =  {  enviRaster   }`,
          `!null   =  {  idlNotebook   }`,
          `!null   =  {  !map   } ; special case, handled by sys var`,
          `end     `,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            structureNames: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: `none`,
        code: [
          `     compile_opt idl2    `,
          `!null   =  {  IDLnetURl   }`,
          `!null   =  {  enviRaster   }`,
          `!null   =  {  idlNotebook   }`,
          `!null   =  {  !map   } ; special case, handled by sys var`,
          `end     `,
        ],
        config: {
          formatter: 'fiddle',
          style: {
            structureNames: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
  {
    suiteName: `Verify auto-fix/format of template escape characters`,
    fileName: `style.template-escape.spec.ts`,
    tests: [
      {
        name: ` only changes the last line with modern`,
        code: [
          `compile_opt idl2`,
          `a = \`\\\`\``,
          `a = \`\\$\``,
          `a = \`\\\\\``,
          `a = \`\\b\``,
          `a = \`\\f\``,
          `a = \`\\n\``,
          `a = \`\\r\``,
          `a = \`\\t\``,
          `a = \`\\v\``,
          `a = \`\\x00 \\XaF\``,
          `end`,
        ],
        config: {
          style: {
            hex: STYLE_FLAG_LOOKUP.LOWER,
          },
        },
      },
      {
        name: ` only changes the last line with dated`,
        code: [
          `compile_opt idl2`,
          `a = \`\\\`\``,
          `a = \`\\$\``,
          `a = \`\\\\\``,
          `a = \`\\b\``,
          `a = \`\\f\``,
          `a = \`\\n\``,
          `a = \`\\r\``,
          `a = \`\\t\``,
          `a = \`\\v\``,
          `a = \`\\x00 \\XaF\``,
          `end`,
        ],
        config: {
          style: {
            hex: STYLE_FLAG_LOOKUP.UPPER,
          },
        },
      },
      {
        name: ` only changes the last line with none`,
        code: [
          `compile_opt idl2`,
          `a = \`\\\`\``,
          `a = \`\\$\``,
          `a = \`\\\\\``,
          `a = \`\\b\``,
          `a = \`\\f\``,
          `a = \`\\n\``,
          `a = \`\\r\``,
          `a = \`\\t\``,
          `a = \`\\v\``,
          `a = \`\\x00 \\XaF\``,
          `end`,
        ],
        config: {
          style: {
            hex: STYLE_FLAG_LOOKUP.NONE,
          },
        },
      },
    ],
  },
];
