import { IDL_TYPE_LOOKUP } from '../idl-data-types.interface';

/**
 * For each known IDL data type, specify which types are allowed to have type arguments
 * and what the defaults should be if none are present.
 *
 * !!!IMPORTANT NOTE!!!
 *
 * This only has logic for a single type-argument for right now.
 */
export const DEFAULT_TYPE_ARGS: { [key: string]: string[] } = {};
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.ARRAY] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.ARRAY_PROMOTION] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.LIST] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.OBJECT] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.POINTER] = [IDL_TYPE_LOOKUP.ANY];
// DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.STRUCTURE] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.TYPE_OF_ARG] = ['0'];

// these really have two types: values and index/key
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.HASH] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.ORDERED_HASH] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.DICTIONARY] = [IDL_TYPE_LOOKUP.ANY];

// tasks
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.ENVI_TASK] = [IDL_TYPE_LOOKUP.ANY];
DEFAULT_TYPE_ARGS[IDL_TYPE_LOOKUP.IDL_TASK] = [IDL_TYPE_LOOKUP.ANY];
