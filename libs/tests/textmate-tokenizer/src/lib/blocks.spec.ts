import { TextMateParse } from '@idl/tests/helpers';

describe(`[auto generated] Validates block parsing auto-closes`, () => {
  it(`[auto generated] lib example from kruskal_wallis.pro`, async () => {
    // test code to extract tokens from
    const code = [
      ``,
      `if !true then     $`,
      ``,
      `while !true DO BEGIN`,
      `  a = 42 `,
      `ENDWHILE $`,
      ``,
      `ELSE  stop = stop+1`,
      `end`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 1,
        match: 'if',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 1,
        match: '!true',
        startIndex: 3,
        endIndex: 8,
        scopes: ['source.idl', 'group.logic.if.idl', 'constant.language.idl'],
      },
      {
        line: 1,
        match: 'then',
        startIndex: 9,
        endIndex: 13,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 1,
        match: '$',
        startIndex: 18,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 3,
        match: 'while',
        startIndex: 0,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: '!true',
        startIndex: 6,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'constant.language.idl',
        ],
      },
      {
        line: 3,
        match: 'DO',
        startIndex: 12,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'group.loop.do.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: ' BEGIN',
        startIndex: 14,
        endIndex: 20,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'group.loop.do.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 4,
        match: 'a',
        startIndex: 2,
        endIndex: 3,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'group.loop.do.idl',
          'group.block.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 4,
        match: '=',
        startIndex: 4,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'group.loop.do.idl',
          'group.block.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 4,
        match: '42',
        startIndex: 6,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'group.loop.do.idl',
          'group.block.idl',
          'group.assignment.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 5,
        match: 'ENDWHILE',
        startIndex: 0,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.loop.whileidl',
          'group.loop.do.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 5,
        match: '$',
        startIndex: 9,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 7,
        match: 'ELSE',
        startIndex: 0,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.logic.else.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 7,
        match: 'stop',
        startIndex: 6,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.logic.else.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 7,
        match: '=',
        startIndex: 11,
        endIndex: 12,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.logic.else.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 7,
        match: 'stop',
        startIndex: 13,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.logic.else.idl',
          'group.assignment.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 7,
        match: '+',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.logic.else.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 7,
        match: '1',
        startIndex: 18,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.logic.else.idl',
          'group.assignment.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 8,
        match: 'end',
        startIndex: 0,
        endIndex: 3,
        scopes: ['source.idl', 'keyword.control.idl'],
      },
    ];
    expect(expected).toEqual(tokenized);
  });
});
