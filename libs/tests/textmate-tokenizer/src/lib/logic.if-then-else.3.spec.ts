import { TextMateParse } from '@idl/tests/helpers';

describe(`[auto generated] Validates for if-then-else parsing [3]`, () => {
  it(`[auto generated] example from IDL code [1]`, async () => {
    // test code to extract tokens from
    const code = [`if i ne 0 then a[0, m1-i] = y ;Symmetrical`];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'if',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: 'i',
        startIndex: 3,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: 'ne',
        startIndex: 5,
        endIndex: 7,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: '0',
        startIndex: 8,
        endIndex: 9,
        scopes: ['source.idl', 'group.logic.if.idl', 'constant.numeric.idl'],
      },
      {
        line: 0,
        match: 'then',
        startIndex: 10,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: 'a',
        startIndex: 15,
        endIndex: 16,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: '[',
        startIndex: 16,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 0,
        match: '0',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 0,
        match: ', ',
        startIndex: 18,
        endIndex: 20,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
        ],
      },
      {
        line: 0,
        match: 'm1',
        startIndex: 20,
        endIndex: 22,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: '-',
        startIndex: 22,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: 'i',
        startIndex: 23,
        endIndex: 24,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ']',
        startIndex: 24,
        endIndex: 25,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 0,
        match: '=',
        startIndex: 26,
        endIndex: 27,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: 'y',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ';',
        startIndex: 30,
        endIndex: 31,
        scopes: ['source.idl', 'comment.line.idl'],
      },
      {
        line: 0,
        match: 'Symmetrical',
        startIndex: 31,
        endIndex: 42,
        scopes: ['source.idl', 'comment.line.idl'],
      },
    ];
    expect(expected).toEqual(tokenized);
  });

  it(`[auto generated] example from IDL code [2]`, async () => {
    // test code to extract tokens from
    const code = [
      `if (ISA(equation)) then begin`,
      `  graphic.SetProperty, EQUATION=equation`,
      `  arg1 = equation`,
      `  if (ISA(style)) then arg2 = style`,
      `endif`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'if',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: '(',
        startIndex: 3,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'ISA',
        startIndex: 4,
        endIndex: 7,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'entity.name.function.idl',
        ],
      },
      {
        line: 0,
        match: '(',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'equation',
        startIndex: 8,
        endIndex: 16,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 16,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'then',
        startIndex: 19,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: ' begin',
        startIndex: 23,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 1,
        match: 'graphic',
        startIndex: 2,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: '.',
        startIndex: 9,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'SetProperty',
        startIndex: 10,
        endIndex: 21,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro-method.idl',
          'support.function.idl-procedure-method',
        ],
      },
      {
        line: 1,
        match: ',',
        startIndex: 21,
        endIndex: 22,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'EQUATION',
        startIndex: 23,
        endIndex: 31,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro-method.idl',
          'parameter.usage.keyword.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 1,
        match: '=',
        startIndex: 31,
        endIndex: 32,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro-method.idl',
          'parameter.usage.keyword.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'equation',
        startIndex: 32,
        endIndex: 40,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro-method.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 2,
        match: 'arg1',
        startIndex: 2,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 2,
        match: '=',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 2,
        match: 'equation',
        startIndex: 9,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.assignment.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 3,
        match: '  if',
        startIndex: 0,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: '(',
        startIndex: 5,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 3,
        match: 'ISA',
        startIndex: 6,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'entity.name.function.idl',
        ],
      },
      {
        line: 3,
        match: '(',
        startIndex: 9,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 3,
        match: 'style',
        startIndex: 10,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 3,
        match: ')',
        startIndex: 15,
        endIndex: 16,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 3,
        match: ')',
        startIndex: 16,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 3,
        match: 'then',
        startIndex: 18,
        endIndex: 22,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: 'arg2',
        startIndex: 23,
        endIndex: 27,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 3,
        match: '=',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 3,
        match: 'style',
        startIndex: 30,
        endIndex: 35,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 4,
        match: 'endif',
        startIndex: 0,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
    ];
    expect(expected).toEqual(tokenized);
  });

  it(`[auto generated] example from IDL code [3]`, async () => {
    // test code to extract tokens from
    const code = [
      `IF (nms[i-1, j] && ~marked[i-1, j]) THEN $`,
      `  canny_follow, i-1, j, nms, marked`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'IF',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: '(',
        startIndex: 3,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'nms',
        startIndex: 4,
        endIndex: 7,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: '[',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 0,
        match: 'i',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: '-',
        startIndex: 9,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: '1',
        startIndex: 10,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 0,
        match: ', ',
        startIndex: 11,
        endIndex: 13,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
        ],
      },
      {
        line: 0,
        match: 'j',
        startIndex: 13,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ']',
        startIndex: 14,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 0,
        match: '&&',
        startIndex: 16,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: '~',
        startIndex: 19,
        endIndex: 20,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: 'marked',
        startIndex: 20,
        endIndex: 26,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: '[',
        startIndex: 26,
        endIndex: 27,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 0,
        match: 'i',
        startIndex: 27,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: '-',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: '1',
        startIndex: 29,
        endIndex: 30,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 0,
        match: ', ',
        startIndex: 30,
        endIndex: 32,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
        ],
      },
      {
        line: 0,
        match: 'j',
        startIndex: 32,
        endIndex: 33,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ']',
        startIndex: 33,
        endIndex: 34,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 34,
        endIndex: 35,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'THEN',
        startIndex: 36,
        endIndex: 40,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: '$',
        startIndex: 41,
        endIndex: 42,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'canny_follow',
        startIndex: 2,
        endIndex: 14,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 1,
        match: ',',
        startIndex: 14,
        endIndex: 15,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'i',
        startIndex: 16,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: '-',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: '1',
        startIndex: 18,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'constant.numeric.idl',
        ],
      },
      {
        line: 1,
        match: ',',
        startIndex: 19,
        endIndex: 20,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'j',
        startIndex: 21,
        endIndex: 22,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: ',',
        startIndex: 22,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'nms',
        startIndex: 24,
        endIndex: 27,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: ',',
        startIndex: 27,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'marked',
        startIndex: 29,
        endIndex: 35,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.call.pro.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
    ];
    expect(expected).toEqual(tokenized);
  });

  it(`[auto generated] example from IDL code [4]`, async () => {
    // test code to extract tokens from
    const code = [
      `IF (max(step) && ~n_elements(stepflag)) THEN $`,
      `  suppMag = nmsupp_mask * mag`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'IF',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: '(',
        startIndex: 3,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'max',
        startIndex: 4,
        endIndex: 7,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'entity.name.function.idl',
        ],
      },
      {
        line: 0,
        match: '(',
        startIndex: 7,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'step',
        startIndex: 8,
        endIndex: 12,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 12,
        endIndex: 13,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: '&&',
        startIndex: 14,
        endIndex: 16,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: '~',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: 'n_elements',
        startIndex: 18,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'entity.name.function.idl',
        ],
      },
      {
        line: 0,
        match: '(',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'stepflag',
        startIndex: 29,
        endIndex: 37,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 37,
        endIndex: 38,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 38,
        endIndex: 39,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'THEN',
        startIndex: 40,
        endIndex: 44,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: '$',
        startIndex: 45,
        endIndex: 46,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'suppMag',
        startIndex: 2,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: '=',
        startIndex: 10,
        endIndex: 11,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'nmsupp_mask',
        startIndex: 12,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: '*',
        startIndex: 24,
        endIndex: 25,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'mag',
        startIndex: 26,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.assignment.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
    ];
    expect(expected).toEqual(tokenized);
  });

  it(`[auto generated] example from IDL code [5]`, async () => {
    // test code to extract tokens from
    const code = [
      `if (~Isa(hDefinition, 'Hash') || $`,
      `    ~hDefinition.HasKey('schema') || $`,
      `    ~(hDefinition['schema']).StartsWith('IDLColorGradientDefinition', /FOLD_CASE)) then begin`,
      `  message, 'File does not contain a valid color gradient definition.', /NONAME `,
      `endif`,
    ];

    // extract tokens
    const tokenized = await TextMateParse(code);

    // define expected tokens
    const expected = [
      {
        line: 0,
        match: 'if',
        startIndex: 0,
        endIndex: 2,
        scopes: ['source.idl', 'group.logic.if.idl', 'keyword.control.idl'],
      },
      {
        line: 0,
        match: '(',
        startIndex: 3,
        endIndex: 4,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: '~',
        startIndex: 4,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: 'Isa',
        startIndex: 5,
        endIndex: 8,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'entity.name.function.idl',
        ],
      },
      {
        line: 0,
        match: '(',
        startIndex: 8,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: 'hDefinition',
        startIndex: 9,
        endIndex: 20,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 0,
        match: ',',
        startIndex: 20,
        endIndex: 21,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 0,
        match: "'",
        startIndex: 22,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 0,
        match: 'Hash',
        startIndex: 23,
        endIndex: 27,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 0,
        match: "'",
        startIndex: 27,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 0,
        match: ')',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 0,
        match: '||',
        startIndex: 30,
        endIndex: 32,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 0,
        match: '$',
        startIndex: 33,
        endIndex: 34,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: '~',
        startIndex: 4,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'hDefinition',
        startIndex: 5,
        endIndex: 16,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 1,
        match: '.',
        startIndex: 16,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 1,
        match: 'HasKey',
        startIndex: 17,
        endIndex: 23,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'entity.name.function.idl-method.idl',
        ],
      },
      {
        line: 1,
        match: '(',
        startIndex: 23,
        endIndex: 24,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 1,
        match: "'",
        startIndex: 24,
        endIndex: 25,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 1,
        match: 'schema',
        startIndex: 25,
        endIndex: 31,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 1,
        match: "'",
        startIndex: 31,
        endIndex: 32,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 1,
        match: ')',
        startIndex: 32,
        endIndex: 33,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 1,
        match: '||',
        startIndex: 34,
        endIndex: 36,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 1,
        match: '$',
        startIndex: 37,
        endIndex: 38,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.line-continuation.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 2,
        match: '~',
        startIndex: 4,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 2,
        match: '(',
        startIndex: 5,
        endIndex: 6,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 2,
        match: 'hDefinition',
        startIndex: 6,
        endIndex: 17,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'variable.other.readwrite.ts.idl',
        ],
      },
      {
        line: 2,
        match: '[',
        startIndex: 17,
        endIndex: 18,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 2,
        match: "'",
        startIndex: 18,
        endIndex: 19,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: 'schema',
        startIndex: 19,
        endIndex: 25,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: "'",
        startIndex: 25,
        endIndex: 26,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: ']',
        startIndex: 26,
        endIndex: 27,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'group.brackets.square.idl',
          'meta.brace.square.idl',
        ],
      },
      {
        line: 2,
        match: ')',
        startIndex: 27,
        endIndex: 28,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 2,
        match: '.',
        startIndex: 28,
        endIndex: 29,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 2,
        match: 'StartsWith',
        startIndex: 29,
        endIndex: 39,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'entity.name.function.idl-method.idl',
        ],
      },
      {
        line: 2,
        match: '(',
        startIndex: 39,
        endIndex: 40,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 2,
        match: "'",
        startIndex: 40,
        endIndex: 41,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: 'IDLColorGradientDefinition',
        startIndex: 41,
        endIndex: 67,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: "'",
        startIndex: 67,
        endIndex: 68,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 2,
        match: ',',
        startIndex: 68,
        endIndex: 69,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 2,
        match: '/FOLD_CASE',
        startIndex: 70,
        endIndex: 80,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'parameter.usage.keyword.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 2,
        match: ')',
        startIndex: 80,
        endIndex: 81,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'group.call.func-method.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 2,
        match: ')',
        startIndex: 81,
        endIndex: 82,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.brackets.paren.idl',
          'meta.brace.round.idl',
        ],
      },
      {
        line: 2,
        match: 'then',
        startIndex: 83,
        endIndex: 87,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 2,
        match: ' begin',
        startIndex: 87,
        endIndex: 93,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
      {
        line: 3,
        match: 'message',
        startIndex: 2,
        endIndex: 9,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'support.function.idl-procedure',
        ],
      },
      {
        line: 3,
        match: ',',
        startIndex: 9,
        endIndex: 10,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 3,
        match: "'",
        startIndex: 11,
        endIndex: 12,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 3,
        match: 'File does not contain a valid color gradient definition.',
        startIndex: 12,
        endIndex: 68,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 3,
        match: "'",
        startIndex: 68,
        endIndex: 69,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'string.quoted.single.idl',
        ],
      },
      {
        line: 3,
        match: ',',
        startIndex: 69,
        endIndex: 70,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'keyword.operator.idl',
        ],
      },
      {
        line: 3,
        match: '/NONAME',
        startIndex: 71,
        endIndex: 78,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'group.call.pro.idl',
          'parameter.usage.keyword.idl',
          'entity.other.attribute-name.idl',
        ],
      },
      {
        line: 4,
        match: 'endif',
        startIndex: 0,
        endIndex: 5,
        scopes: [
          'source.idl',
          'group.logic.if.idl',
          'group.logic.then.idl',
          'group.block.idl',
          'keyword.control.idl',
        ],
      },
    ];
    expect(expected).toEqual(tokenized);
  });
});
